
let fac = fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)) in fac 4
----------------------------------------------------
CT-LETPOLY-ALG: (|Œì|=0) let fac = fix (Œªfac.
                                          Œªn.
                                            if iszero n
                                            then 1
                                            else n * fac (pred n))
                         in
                         fac 4
CT-FIX         : (|Œì|=0) fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n))
CT-ABS(UNTYPE): (|Œì|=0) Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)
CT-ABS(UNTYPE): (|Œì|=1) Œªn. if iszero n then 1 else n * fac (pred n)
CT-IF         : (|Œì|=2) if iszero n then 1 else n * fac (pred n)
CT-ISZERO     : (|Œì|=2) iszero n
CT-VAR        : (|Œì|=2) n
CT-SUCC       : (|Œì|=2) 1
CT-ZERO       : (|Œì|=2) 0
CT-TIMES      : (|Œì|=2) n * fac (pred n)
CT-VAR        : (|Œì|=2) n
CT-APP        : (|Œì|=2) fac (pred n)
CT-VAR        : (|Œì|=2) fac
CT-PRED       : (|Œì|=2) pred n
CT-VAR        : (|Œì|=2) n
SIMPLIFYTY    : ?X0 ‚Üí (?X1 ‚Üí ùêç)
UNIFY: ?X0, ?X1‚Üíùêç
UNIFY: ùêÅ, ùêÅ
UNIFY: ùêç, ùêç
UNIFY: ?X1, ùêç
UNIFY: ùêç, ùêç
UNIFY: ùêç‚Üíùêç, ùêç‚Üí?X2
UNIFY: ùêç, ùêç
UNIFY: ùêç, ?X2
UNIFY: ùêç, ùêç
SIMPLIFYTY    : ùêç ‚Üí ùêç
SIMPLIFYTY    : ùêç ‚Üí ùêç
SIMPLIFYTY    : ùêç
SIMPLIFYTY    : ùêç
SIMPLIFYTY    : ùêç
SIMPLIFYTY    : ùêç
UNIFY: ùêÅ, ùêÅ
UNIFY: ùêç, ùêç
UNIFY: ?X1, ùêç
UNIFY: ùêç, ùêç
UNIFY: ?X0, ùêç‚Üí?X2
UNIFY: ùêç, ùêç
CT-APP        : (|Œì|=1) ?X3 4
CT-VAR        : (|Œì|=1) ?X3
CT-SUCC       : (|Œì|=1) 4
CT-SUCC       : (|Œì|=1) 3
CT-SUCC       : (|Œì|=1) 2
CT-SUCC       : (|Œì|=1) 1
CT-ZERO       : (|Œì|=1) 0
----------------   TYPE CHECKED !   ----------------
E-LET         : let fac = fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n))
                in
                fac 4
E-FIXBETA     : fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x‚Ü¶s]t
E-LETV        : let fac = Œªn.
                            if iszero n
                            then 1
                            else n * (fix (Œªfac.
                                             Œªn'.
                                               if iszero n'
                                               then 1
                                               else n' * fac (pred n')))
                                     (pred n)
                in
                fac 4
SUBSTITUTE    : [x‚Ü¶s]t
E-APPABS      : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                4
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero 4
                then 1
                else 4 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 4)
E-ISZROSUC    : iszero 4
E-IFFLASE     : if false
                then 1
                else 4 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 4)
E-TIMES       : 4 * (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                    (pred 4)
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-APPFIX      : (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                (pred 4)
E-FIXBETA     : fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 4)
E-PREDSUC     : pred 4
E-APPABS      : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                3
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero 3
                then 1
                else 3 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 3)
E-ISZROSUC    : iszero 3
E-IFFLASE     : if false
                then 1
                else 3 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 3)
E-TIMES       : 3 * (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                    (pred 3)
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-APPFIX      : (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                (pred 3)
E-FIXBETA     : fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 3)
E-PREDSUC     : pred 3
E-APPABS      : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                2
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero 2
                then 1
                else 2 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 2)
E-ISZROSUC    : iszero 2
E-IFFLASE     : if false
                then 1
                else 2 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 2)
E-TIMES       : 2 * (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                    (pred 2)
E-SUCC        : 2
E-SUCC        : 1
E-APPFIX      : (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                (pred 2)
E-FIXBETA     : fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 2)
E-PREDSUC     : pred 2
E-APPABS      : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                1
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero 1
                then 1
                else 1 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 1)
E-ISZROSUC    : iszero 1
E-IFFLASE     : if false
                then 1
                else 1 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 1)
E-TIMES       : 1 * (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                    (pred 1)
E-SUCC        : 1
E-APPFIX      : (fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n)))
                (pred 1)
E-FIXBETA     : fix (Œªfac. Œªn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 1)
E-PREDSUC     : pred 1
E-APPABS      : (Œªn.
                   if iszero n
                   then 1
                   else n * (fix (Œªfac.
                                    Œªn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                0
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero 0
                then 1
                else 0 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 0)
E-ISZROZRO    : iszero 0
E-IFTRUE      : if true
                then 1
                else 0 * (fix (Œªfac.
                                 Œªn. if iszero n then 1 else n * fac (pred n)))
                         (pred 0)
E-SUCC        : 1
E-SUCC        : 1
E-SUCC        : 2
E-SUCC        : 1
E-SUCC        : 6
E-SUCC        : 5
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-SUCC        : 24
E-SUCC        : 23
E-SUCC        : 22
E-SUCC        : 21
E-SUCC        : 20
E-SUCC        : 19
E-SUCC        : 18
E-SUCC        : 17
E-SUCC        : 16
E-SUCC        : 15
E-SUCC        : 14
E-SUCC        : 13
E-SUCC        : 12
E-SUCC        : 11
E-SUCC        : 10
E-SUCC        : 9
E-SUCC        : 8
E-SUCC        : 7
E-SUCC        : 6
E-SUCC        : 5
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
{ùêç‚Üíùêç=ùêç‚Üí?X4, ùêç=ùêç, ùêç=ùêç, ùêç=ùêç, ùêç=ùêç}
----------------  CONSTRAINTS LIST  ----------------
UNIFY: ùêç‚Üíùêç, ùêç‚Üí?X4
UNIFY: ùêç, ùêç
UNIFY: ùêç, ?X4
UNIFY: ùêç, ùêç
UNIFY: ùêç, ùêç
UNIFY: ùêç, ùêç
UNIFY: ùêç, ùêç
{?X4=ùêç}
----------------   SOLUTION FOUND ! ----------------
24
  : ùêç

