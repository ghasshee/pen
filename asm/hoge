00000000:   PUSH1 "80"
00000002:   PUSH1 "40"
00000004:   MSTORE
00000005:   CALLVALUE
00000006:   DUP1
00000007:   ISZERO
00000008:   PUSH2 "0010"
0000000B:   JUMPI
0000000C:   PUSH1 "00"
0000000E:   DUP1
0000000F:   REVERT
00000010:   JUMPDEST "10"
00000011:   POP
00000012:   PUSH1 "BE"
00000014:   DUP1
00000015:   PUSH2 "001F"
00000018:   PUSH1 "00"
0000001A:   CODECOPY
0000001B:   PUSH1 "00"
0000001D:   RETURN
0000001E:   INVALID
// RUNTIME
00000000:   PUSH1 "80"
00000002:   PUSH1 "40"
00000004:   MSTORE
00000005:   CALLVALUE
00000006:   DUP1
00000007:   ISZERO
00000008:   PUSH1 "0F"
0000000A:   JUMPI
0000000B:   PUSH1 "00"
0000000D:   DUP1
0000000E:   REVERT
0000000F:   JUMPDEST "F"
00000010:   POP
00000011:   PUSH1 "04"
00000013:   CALLDATASIZE
00000014:   LT
00000015:   PUSH1 "32"
00000017:   JUMPI
00000018:   PUSH1 "00"
0000001A:   CALLDATALOAD
0000001B:   PUSH1 "E0"
0000001D:   SHR
0000001E:   DUP1
0000001F:   PUSH4 "371303C0"
00000024:   EQ
00000025:   PUSH1 "37"
00000027:   JUMPI
00000028:   DUP1
00000029:   PUSH4 "6D4CE63C"
0000002E:   EQ
0000002F:   PUSH1 "3F"
00000031:   JUMPI
00000032:   JUMPDEST "32"
00000033:   PUSH1 "00"
00000035:   DUP1
00000036:   REVERT
00000037:   JUMPDEST "37"
00000038:   PUSH1 "3D"
0000003A:   PUSH1 "54"
0000003C:   JUMP
0000003D:   JUMPDEST "3D"
0000003E:   STOP
0000003F:   JUMPDEST "3F"
00000040:   PUSH1 "00"
00000042:   SLOAD
00000043:   PUSH1 "40"
00000045:   MLOAD
00000046:   SWAP1
00000047:   DUP2
00000048:   MSTORE
00000049:   PUSH1 "20"
0000004B:   ADD
0000004C:   PUSH1 "40"
0000004E:   MLOAD
0000004F:   DUP1
00000050:   SWAP2
00000051:   SUB
00000052:   SWAP1
00000053:   RETURN
00000054:   JUMPDEST "54"
00000055:   PUSH1 "00"
00000057:   SLOAD
00000058:   PUSH1 "60"
0000005A:   SWAP1
0000005B:   PUSH1 "01"
0000005D:   PUSH1 "65"
0000005F:   JUMP
00000060:   JUMPDEST "60"
00000061:   PUSH1 "00"
00000063:   SSTORE
00000064:   JUMP
00000065:   JUMPDEST "65"
00000066:   PUSH1 "00"
00000068:   DUP3
00000069:   NOT
0000006A:   DUP3
0000006B:   GT
0000006C:   ISZERO
0000006D:   PUSH1 "83"
0000006F:   JUMPI
00000070:   PUSH4 "4E487B71"
00000075:   PUSH1 "E0"
00000077:   SHL
00000078:   DUP2
00000079:   MSTORE
0000007A:   PUSH1 "11"
0000007C:   PUSH1 "04"
0000007E:   MSTORE
0000007F:   PUSH1 "24"
00000081:   DUP2
00000082:   REVERT
00000083:   JUMPDEST "83"
00000084:   POP
00000085:   ADD
00000086:   SWAP1
00000087:   JUMP
00000088:   INVALID
// IPFS/VER
00000000:   INFO "A2"
00000001:   INFO "64"
00000002:   INFO "ipfs5822"
00000003:   INFO "1220EBBF9E6530745C2246C5EC9DF0F41280941AB72D344700CCF6BFF96F2DF6469C"
00000004:   INFO "64"
00000005:   INFO "solc43"
00000006:   INFO "000802"
00000007:   INFO "00"
00000008:   INFO "33"
[PUSH1 "80",PUSH1 "40",MSTORE]
[CALLVALUE,DUP1]
[ISZERO,PUSH2 "0010",JUMPI]
[PUSH1 "00",DUP1]
[REVERT]
[JUMPDEST "10"]
[POP]
[PUSH1 "BE",DUP1]
[PUSH2 "001F",PUSH1 "00",CODECOPY]
[PUSH1 "00",RETURN]
[INVALID]
[PUSH1 "80",PUSH1 "40",MSTORE]
[CALLVALUE,DUP1]
[ISZERO,PUSH1 "0F",JUMPI]
[PUSH1 "00",DUP1]
[REVERT]
[JUMPDEST "F"]
[POP]
[PUSH1 "04",CALLDATASIZE,LT,PUSH1 "32",JUMPI]
[PUSH1 "00",CALLDATALOAD,PUSH1 "E0",SHR,DUP1]
[PUSH4 "371303C0",EQ,PUSH1 "37",JUMPI]
[DUP1]
[PUSH4 "6D4CE63C",EQ,PUSH1 "3F",JUMPI]
[JUMPDEST "32"]
[PUSH1 "00",DUP1]
[REVERT]
[JUMPDEST "37"]
[PUSH1 "3D",PUSH1 "54",JUMP]
[JUMPDEST "3D"]
[STOP]
[JUMPDEST "3F"]
[PUSH1 "00",SLOAD,PUSH1 "40",MLOAD,SWAP1]
[DUP2]
[MSTORE]
[PUSH1 "20",ADD,PUSH1 "40",MLOAD,DUP1]
[SWAP2]
[SUB,SWAP1]
[RETURN]
[JUMPDEST "54"]
[PUSH1 "00",SLOAD,PUSH1 "60",SWAP1]
[PUSH1 "01",PUSH1 "65",JUMP]
[JUMPDEST "60"]
[PUSH1 "00",SSTORE]
[JUMP]
[JUMPDEST "65"]
[PUSH1 "00",DUP3]
[NOT,DUP3]
[GT,ISZERO,PUSH1 "83",JUMPI]
[PUSH4 "4E487B71",PUSH1 "E0",SHL,DUP2]
[MSTORE]
[PUSH1 "11",PUSH1 "04",MSTORE]
[PUSH1 "24",DUP2]
[REVERT]
[JUMPDEST "83"]
[POP]
[ADD,SWAP1]
[JUMP]
[INVALID]
[INFO "A2",INFO "64",INFO "ipfs5822",INFO "1220EBBF9E6530745C2246C5EC9DF0F41280941AB72D344700CCF6BFF96F2DF6469C",INFO "64",INFO "solc43",INFO "000802",INFO "00",INFO "33"]
[
*-( MSTORE
    +-  PUSH1 "80"
    +-  PUSH1 "40"
,
+-  CALLVALUE
,
+-  DUP1
,
*-( JUMPI
    +-  ISZERO
    |   +-  ARG 1
    +-  PUSH2 "0010"
,
+-  PUSH1 "00"
,
+-  DUP1
,
*-( REVERT
    +-  ARG 1
    +-  ARG 2
,
*-( JUMPDEST "10"
,
*-( POP
    +-  ARG 1
,
+-  PUSH1 "BE"
,
+-  DUP1
,
*-( CODECOPY
    +-  ARG 1
    +-  PUSH2 "001F"
    +-  PUSH1 "00"
,
*-( RETURN
    +-  ARG 1
    +-  PUSH1 "00"
,
*-( INVALID
,
*-( MSTORE
    +-  PUSH1 "80"
    +-  PUSH1 "40"
,
+-  CALLVALUE
,
+-  DUP1
,
*-( JUMPI
    +-  ISZERO
    |   +-  ARG 1
    +-  PUSH1 "0F"
,
+-  PUSH1 "00"
,
+-  DUP1
,
*-( REVERT
    +-  ARG 1
    +-  ARG 2
,
*-( JUMPDEST "F"
,
*-( POP
    +-  ARG 1
,
*-( JUMPI
    +-  LT
    |   +-  PUSH1 "04"
    |   +-  CALLDATASIZE
    +-  PUSH1 "32"
,
+-  SHR
    +-  CALLDATALOAD
    |   +-  PUSH1 "00"
    +-  PUSH1 "E0"
,
+-  DUP1
,
*-( JUMPI
    +-  EQ
    |   +-  ARG 1
    |   +-  PUSH4 "371303C0"
    +-  PUSH1 "37"
,
+-  DUP1
,
*-( JUMPI
    +-  EQ
    |   +-  ARG 1
    |   +-  PUSH4 "6D4CE63C"
    +-  PUSH1 "3F"
,
*-( JUMPDEST "32"
,
+-  PUSH1 "00"
,
+-  DUP1
,
*-( REVERT
    +-  ARG 1
    +-  ARG 2
,
*-( JUMPDEST "37"
,
+-  PUSH1 "3D"
,
*-( JUMP
    +-  PUSH1 "54"
,
*-( JUMPDEST "3D"
,
*-( STOP
,
*-( JUMPDEST "3F"
,
+-  SLOAD
    +-  PUSH1 "00"
,
+-  MLOAD
    +-  PUSH1 "40"
,
*-( SWAP1
,
+-  DUP2
,
*-( MSTORE
    +-  ARG 1
    +-  ARG 2
,
+-  ADD
    +-  ARG 1
    +-  PUSH1 "20"
,
+-  MLOAD
    +-  PUSH1 "40"
,
+-  DUP1
,
*-( SWAP2
,
+-  SUB
    +-  ARG 1
    +-  ARG 2
,
*-( SWAP1
,
*-( RETURN
    +-  ARG 1
    +-  ARG 2
,
*-( JUMPDEST "54"
,
+-  SLOAD
    +-  PUSH1 "00"
,
+-  PUSH1 "60"
,
*-( SWAP1
,
+-  PUSH1 "01"
,
*-( JUMP
    +-  PUSH1 "65"
,
*-( JUMPDEST "60"
,
*-( SSTORE
    +-  ARG 1
    +-  PUSH1 "00"
,
*-( JUMP
    +-  ARG 1
,
*-( JUMPDEST "65"
,
+-  PUSH1 "00"
,
+-  DUP3
,
+-  NOT
    +-  ARG 1
,
+-  DUP3
,
*-( JUMPI
    +-  ISZERO
    |   +-  GT
    |       +-  ARG 1
    |       +-  ARG 2
    +-  PUSH1 "83"
,
+-  SHL
    +-  PUSH4 "4E487B71"
    +-  PUSH1 "E0"
,
+-  DUP2
,
*-( MSTORE
    +-  ARG 1
    +-  ARG 2
,
*-( MSTORE
    +-  PUSH1 "11"
    +-  PUSH1 "04"
,
+-  PUSH1 "24"
,
+-  DUP2
,
*-( REVERT
    +-  ARG 1
    +-  ARG 2
,
*-( JUMPDEST "83"
,
*-( POP
    +-  ARG 1
,
+-  ADD
    +-  ARG 1
    +-  ARG 2
,
*-( SWAP1
,
*-( JUMP
    +-  ARG 1
,
*-( INVALID
]
M[0x40] := 0x80
Callvalue
Stk[1]
If Arg[1]==0 Goto 0x0010
0x00
Stk[1]
Revert(Arg[1], Arg[2])
<< label: 10 >>
Pop()
0xBE
Stk[1]
Codecopy(to:0x00,from:0x001F,size:Arg[1])
Return(Arg[1], 0x00)

M[0x40] := 0x80
Callvalue
Stk[1]
If Arg[1]==0 Goto 0x0F
0x00
Stk[1]
Revert(Arg[1], Arg[2])
<< label: F >>
Pop()
If 0x04<Calldatasize Goto 0x32
calldataload(0x00)>>0xE0
Stk[1]
If Arg[1]==0x371303C0 Goto 0x37
Stk[1]
If Arg[1]==0x6D4CE63C Goto 0x3F
<< label: 32 >>
0x00
Stk[1]
Revert(Arg[1], Arg[2])
<< label: 37 >>
0x3D
Goto 0x54
<< label: 3D >>
Stop()
<< label: 3F >>
S[0x00]
M[0x40]
Swap1
Stk[2]
M[Arg[2]] := Arg[1]
Arg[1]+0x20
M[0x40]
Stk[1]
Swap2
Arg[1]-Arg[2]
Swap1
Return(Arg[1], Arg[2])
<< label: 54 >>
S[0x00]
0x60
Swap1
0x01
Goto 0x65
<< label: 60 >>
S[0x00] := Arg[1]
Goto Arg[1]
<< label: 65 >>
0x00
Stk[3]
~Arg[1]
Stk[3]
If Arg[1]>Arg[2]==0 Goto 0x83
0x4E487B71<<0xE0
Stk[2]
M[Arg[2]] := Arg[1]
M[0x04] := 0x11
0x24
Stk[2]
Revert(Arg[1], Arg[2])
<< label: 83 >>
Pop()
Arg[1]+Arg[2]
Swap1
Goto Arg[1]


(Q 0):
M[0x40] := 0x80
(Q 1):
Callvalue
(Q 2):
Stk[1]
(Q 3):
If Arg[1]==0 Goto 0x0010
(Q 4):
0x00
(Q 5):
Stk[1]
(Q 6):
Revert(Arg[1], Arg[2])
(Q 7):
<< label: 10 >>
(Q 8):
Pop()
(Q 9):
0xBE
(Q 10):
Stk[1]
(Q 11):
Codecopy(to:0x00,from:0x001F,size:Arg[1])
(Q 12):
Return(Arg[1], 0x00)
(Q 13):

(Q 14):
M[0x40] := 0x80
(Q 15):
Callvalue
(Q 16):
Stk[1]
(Q 17):
If Arg[1]==0 Goto 0x0F
(Q 18):
0x00
(Q 19):
Stk[1]
(Q 20):
Revert(Arg[1], Arg[2])
(Q 21):
<< label: F >>
(Q 22):
Pop()
(Q 23):
If 0x04<Calldatasize Goto 0x32
(Q 24):
calldataload(0x00)>>0xE0
(Q 25):
Stk[1]
(Q 26):
If Arg[1]==0x371303C0 Goto 0x37
(Q 27):
Stk[1]
(Q 28):
If Arg[1]==0x6D4CE63C Goto 0x3F
(Q 29):
<< label: 32 >>
(Q 30):
0x00
(Q 31):
Stk[1]
(Q 32):
Revert(Arg[1], Arg[2])
(Q 33):
<< label: 37 >>
(Q 34):
0x3D
(Q 35):
Goto 0x54
(Q 36):
<< label: 3D >>
(Q 37):
Stop()
(Q 38):
<< label: 3F >>
(Q 39):
S[0x00]
(Q 40):
M[0x40]
(Q 41):
Swap1
(Q 42):
Stk[2]
(Q 43):
M[Arg[2]] := Arg[1]
(Q 44):
Arg[1]+0x20
(Q 45):
M[0x40]
(Q 46):
Stk[1]
(Q 47):
Swap2
(Q 48):
Arg[1]-Arg[2]
(Q 49):
Swap1
(Q 50):
Return(Arg[1], Arg[2])
(Q 51):
<< label: 54 >>
(Q 52):
S[0x00]
(Q 53):
0x60
(Q 54):
Swap1
(Q 55):
0x01
(Q 56):
Goto 0x65
(Q 57):
<< label: 60 >>
(Q 58):
S[0x00] := Arg[1]
(Q 59):
Goto Arg[1]
(Q 60):
<< label: 65 >>
(Q 61):
0x00
(Q 62):
Stk[3]
(Q 63):
~Arg[1]
(Q 64):
Stk[3]
(Q 65):
If Arg[1]>Arg[2]==0 Goto 0x83
(Q 66):
0x4E487B71<<0xE0
(Q 67):
Stk[2]
(Q 68):
M[Arg[2]] := Arg[1]
(Q 69):
M[0x04] := 0x11
(Q 70):
0x24
(Q 71):
Stk[2]
(Q 72):
Revert(Arg[1], Arg[2])
(Q 73):
<< label: 83 >>
(Q 74):
Pop()
(Q 75):
Arg[1]+Arg[2]
(Q 76):
Swap1
(Q 77):
Goto Arg[1]
(Q 78):


