eth.coinbase
miner.setEtherBase(web3.eth.accounts[0])
miner.setEtherbase(web3.eth.accounts[0])
eth.accounts
eth.getBalance(eth.coinbase)
miner.start()
eth.getBalance(eth.coinbase)
quit()
miner.start()
eth.getBalance(eth.coinbase)
miner.stop()
eth.getBalance(eth.coinbase)
miner.start()
eth.getBalance(eth.coinbase)
miner.start()
eth.getBalance(eth.coinbase)
miner.stop()
eth.fromWei(eth.getBalance(eth.coinbase))
eth
account
web3
web3.fromWei(eth.getBalance(eth.coinbase))
eth.blockNumber
miner.start()
eth.blockNumber
miner.stop()
eth.blockNumber
miner.start()
eth.blockNumber
miner.start()
eth.blockNumber
eth.accounts
miner.start()
miner.atop()
miner.stop()
miner.start()
web3.account
miner.stop()
miner.start()
eth.getBalance(to)
miner.start()
miner.stop()
miner.start()
miner.stop()
miner.start()
miner.stop()
miner.start()
miner.stop()
miner.start()
miner.stop()
miner.start()
miner.stop()
miner.start()
miner.stop()
String.splitAt
:t splitAt
:t 1
miner
miner.start()
miner.stop()
exit()
quit()
:q
exit 0
miner
miner.start()
miner.stop()
personal
etherbase
web3
miner.start()
miner.stop()
eth.coinbase
eth
eth.getBalance(eth.coinbase)
eth.getBalance(eth.coinbase).toWei
eth.getBalance(eth.coinbase)
toWei(eth.getBalance(eth.coinbase))
eth
web3
web3.fromWei(eth.getBalance(eth.coinbase))
web3.toWei(eth.getBalance(eth.coinbase))
web3.fromWei(eth.getBalance(eth.coinbase))
web3.fromWei(web3.toWei(eth.getBalance(eth.coinbase)))
web3.fromWei(eth.getBalance(eth.coinbase))
eth.getBalance(eth.accounts[0])
eth.getBalance(eth.accounts[1])
eth.getBalance(eth.accounts[2])
eth.getBalance(eth.accounts[3])
eth.getBalance(eth.accounts[3]))
fromWei(eth.getBalance(eth.accounts[3]))
web3.fromWei(eth.getBalance(eth.accounts[3]))
fromWei(eth.getBalance(eth.accounts[1]))
web3.fromWei(eth.getBalance(eth.accounts[1]))
loadScript('storage.js')
loadScript('./storage.js')
storageOutput
var storageContractAbi = storageOutput.contracts['Storage.sol:Storage'].abi
storageContractAbi
storageContract = eth.contract(JSON.parse(storageContractAbi))
JSON.parse(storageContractAbi)
storageContractAbi
JSON
JSON.parse(storageContractAbi)
miner.start(1)
eth.contract(storageContractAbi)
storageContract = eth.contract(storageContractAbi)
storageContract
var storageBinCode = "0x" + storageOutput.contracts['Storage.sol:Storage'].bin
storageBinCode
var object = { from : eth.accounts[0], data: storageBinCode, gas: 1000000 };
onject
object
var storageInstance = storageContract.new(object)
storageInstance
eth.getTransactionRecept(storageInstance.transactionHash);
eth.getTransactionReceipt(storageInstance.transactionHash);
var storageAddress = eth.getTransationReceipt(storageInstance.transactionHash).contractAddress
var storageAddress = eth.getTransactionReceipt(storageInstance.transactionHash).contractAddress
storageAddress
var storage = storageContract.at(storageAddress);
storage
storage.get.call()
storage
storage.get
storage.get()
storage.get.call
storage.get.call()
eth.coinbase
eth.getBalance(eth.coinbase)
eth.getBalance(eth.coinbase);
web3.fromWei(eth.getBalance(eth.coinbase))
miner.start(1)
web3.fromWei(eth.getBalance(eth.coinbase))
loadScript('storage.js')
var output = loadScript('storage.js')
output
storageOutput
storageOutput.contracts.Storage.sol:Storage
storageOutput.contracts
storageOutput.contracts['Storage.sol:Storage']
storageOutput.contracts['Storage.sol:Storage'].abi
storageOutput.contracts['Storage.sol:Storage'].bin
code = "0x" + storageOutput.contracts['Storage.sol:Storage'].bin
code
abi = storageOutput.contracts['Storage.sol:Storage'].abi
storageContract = eth.contract(abi)
object = {from : eth.coinbase, data: code, gas: 1000000 };
var storageInstance = storageContract.new(object)
storageContract
eth.getTransactionRecept(storageInstance.transactionHash);
eth.getTransactionReceipt(storageInstance.transactionHash);
miner.start
miner.start()
eth.getTransactionReceipt(storageInstance.transactionHash);
var storageAddress = eth.getTransactionReceipt(storageInstance.transactionHash).contractAddress
storageAddress
var storage = storageContract.at(storageAddress);
storage
storage.get.call()
miner.stop
miner.stop()
miner.start(1);
storage.get.call()
storage.set.sendTransaction(43, {from:eth.accounts[0], gas: 1000000})
storage.get.call()
storage.set
storage
storage.get()
storage.get.call()
storage.get
storage.get.call()
storage.set.call()
storage.set.call(42)
storage.set.call(42,32)
storage.set.call(42,22)
storage.set.call(42)
storage.get.call(42)
storage.get.call()
storage
storageContract
storageContract.getData()
storage
storage.allEvents
storage.allEvents()
storage.allEvents().get(a)
a = 0
storage.allEvents().get(a)
a
storage.allEvents().get(a)
a
storage.get.call()
a
storage.allEvents().get(a)
a
storage.allEvents().watch(a)
a
storage.allEvents().watch(a)
a
storage.allEvents().watch(a)
a
storage.get.call()
a
storage.get.call()
a
storage.set.sendTransaction(43, {from:eth.accounts[0], gas: 1000000})
a
storage.set.sendTransaction(410023178, {from:eth.accounts[0], gas: 1000000})
a
storage.get.call()
miner.start(1)
storage.get.call()
eth.getBalance(eth.coinbase);
web3.fromWei(eth.getBalance(eth.coinbase))
web3.fromWei(eth.getBalance(coinbase))
web3.fromWei(eth.getBalance(eth.coinbase))
ls
miner.start(1)
web3
loadScript("../*/*pen.js");
loadScript("../examples/counter.pen.js");
abi
code
counterContract = eth.contract(abi);
object = {from: eth.coinbase, data: code, gas: 1000000 };
counterInstance = counterContract.new(object)
eth.getTransactionReceipt(counterInstance.transactionHash);
counterAddr = eth.getTransactionReceipt(counterInstance.transactionHash).contractAddress
counter = counterContract.at(counterAddr)
gas = {from: eth.coinbase, gas: 1000000};
counter.set.send(0,gas)
counter.set.sendTransaction(0,gas);
counter.inc.send(0,gas);
counter.inc.sendTransaction(0,gas);
counter.inc.sendTransaction(gas);
counter.inc.get()
counter.inc.call()
loadScript("../js/counter.js");
receipt
miner.start(1);
receipt
contract
miner.start(1)
loadScript("../js/counter.js");
receipt
loadScript("../js/counter.js");
receipt
contract
receipt
loadScript("../js/counter.js");
instance
receipt
receipt = eth.getTransactionReceipt(instance.transactionHash);
loadScript("../js/counter.js");
sleep 1
receipt
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
counter = contract.at(address)
counter.get.call()
counter.inc.sendTransaction(gas);
gas = {from: eth.coinbase, gas:1000000}
counter.inc.sendTransaction(gas);
counter.get.call()
counter.inc.sendTransaction(gas);
counter.get.call()
counter.inc.sendTransaction(gas);
counter.get.call()
counter.inc.sendTransaction(gas);
counter.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
counter.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
miner.stop()
miner.start(1)
loadScript("../js/counter.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
counter.get.call()
counter = contract.at(address)
counter.get.call()
counter.init.call()
counter.init.call(gas)
counter.init.send(gas)
counter.init.sendTransaction(gas)
counter.get.call()
counter.inc.sendTransaction(gas);
counter.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
counter.get.call()
loadScript("../js/counter.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
counter = contract.at(address)
counter.inc.sendTransaction(gas);
counter.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
counter.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
counter.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
counter.get.call()
miner.start()
loadScript("../js/counter.js");
web3.fromWei(eth.getBalance(eth.coinbase))
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
counter = contract.at(address)
counter.inc.sendTransaction(gas);
web3.fromWei(eth.getBalance(eth.coinbase))
counter.get.call()
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.send(gas)
count.inc.sendTransaction(gas)
count.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
miner.start(1)
loadScript("../js/count.js");
var receipt = eth.getTransactionReceipt(instance.transaction);
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas).contractAddress;
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
web3.fromWei(eth.getBalance(eth.coinbase))
count.inc.sendTransaction(gas)
count.get.call()
exit()
miner.start(1)
receipt = eth.getTransactionReceipt(instance.transactionHash);
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
receipt
instance
receipt
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
miner.start(1)
count.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
:q
loadScript("../js/count.js");
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
miner.start(1)
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
loadScript("../js/count.js");
instance
loadScript("../js/count.js");
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
:q
miner.start(1)
loadScript("../js/count.js");
instance
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
miner.start(1)
loadScript(../solc/count.js)
loadScript(../solc/count.js);
loadScript(./../solc/count.js);
loadScript("./../solc/count.js");
loadScript(../solc/Count.js);
loadScript();
loadScript(/home/ghasshee/Programs/ml/pen/solc/Count.js);
loadScript(\/home\/ghasshee\/Programs\/ml\/pen\/solc\/Count.js);
loadScript("/home/ghasshee/Programs/ml/pen/solc/count.js");
loadScript("/home/ghasshee/Programs/ml/pen/solc/Count.js");
loadScript("/home/ghasshee/Programs/ml/pen/src/counter.js");
:q
loadScript(../js/count.js);
loadScript("../js/count.js");
loadScript("../solc/Count.js");
loadScript("../js/count.js");
abi
code
loadScript("../solc/Count.js");
abi
loadScript("../solc/Count.js");
gas
receipt = eth.getTransactionReceipt(instnace.transactionHash);
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
receipt
instance
miner.start(1)
loadScript("../solc/Count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
receipt
instance
receipt
receipt = eth.getTransactionReceipt(instance.transactionHash);
receipt
address = receipt.contractAddress
count = contract.at(address)
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
miner.start(1)
loadScript("../js/count.js");
code
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
eth.getBalance(eth.coinbase);
eth.getBalance(eth.coinbase)
eth.getBalance(eth.coinbase).toWei()
web3.fromWei(eth.getBalance(eth.coinbase))
eth.getBalance(eth.coinbase).toWei()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
miner.start(1)
loadScript("../js/count.js");
var receipt = eth.getTransactionReceipt(instance.transaction);
miner.start(1)
loadScript("../js/count.js");
var receipt = eth.getTransactionReceipt(instance.transaction);
abi
code
var receipt = eth.getTransactionReceipt(instance.transaction);
instance
var receipt = eth.getTransactionReceipt(instance.transaction);
var receipt = eth.getTransactionReceipt(instance.transactionHash);
var address = receipt.contractAddress;
var receipt = eth.getTransactionReceipt(instance.transactionHash);
var address = receipt.contractAddress;
address
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
web3.fromWei(eth.getBalance(eth.coinbase))
count.get.call()
abi
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
receipt
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.inc.sendTransaction(gas)
web3.fromWei(eth.getBalance(eth.coinbase))
count.inc.sendTransaction(gas)
count.get.call()
miner.start(1)
loadScript("../solc/Count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
gas
count
count.get.call()
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
:q
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
miner.start(1)
loadScript("../js/count.js");
receipt = eth.getTransactionReceipt(instance.transactionHash);
address = receipt.contractAddress
count = contract.at(address)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()
count.inc.sendTransaction(gas)
count.get.call()