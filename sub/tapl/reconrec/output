
true
----------------------------------------------------
T-TRUE        : (‚à£Œì‚à£=0) true
----------------   TYPE CHECKED !   ----------------
----------------   EVAL FINISHED !  ----------------
true
  : ùêÅ


if false then true else false
----------------------------------------------------
T-IF          : (‚à£Œì‚à£=0) if false then true else false
T-FALSE       : (‚à£Œì‚à£=0) false
T-TRUE        : (‚à£Œì‚à£=0) true
T-FALSE       : (‚à£Œì‚à£=0) false
----------------   TYPE CHECKED !   ----------------
E-IFFLASE     : if false then true else false
----------------   EVAL FINISHED !  ----------------
false
  : ùêÅ


(Œªx:ùêÅ‚ÜíùêÅ. x false) (Œªx:ùêÅ.x)
----------------------------------------------------
T-APP         : (‚à£Œì‚à£=0) (Œªx:ùêÅ‚ÜíùêÅ. x false) (Œªx:ùêÅ.x)
T-ABS         : (‚à£Œì‚à£=0) Œªx:ùêÅ‚ÜíùêÅ. x false
T-APP         : (‚à£Œì‚à£=1) x false
T-VAR         : (‚à£Œì‚à£=1) x
T-FALSE       : (‚à£Œì‚à£=1) false
T-ABS         : (‚à£Œì‚à£=0) Œªx:ùêÅ. x
T-VAR         : (‚à£Œì‚à£=1) x
----------------   TYPE CHECKED !   ----------------
E-APPABS      : (Œªx:ùêÅ‚ÜíùêÅ. x false) (Œªx:ùêÅ.x)
SUBSTITUTE    : [x‚Ü¶s]t
E-APPABS      : (Œªx:ùêÅ.x) false
SUBSTITUTE    : [x‚Ü¶s]t
----------------   EVAL FINISHED !  ----------------
false
  : ùêÅ


(Œªx:ùêÅ.x) true
----------------------------------------------------
T-APP         : (‚à£Œì‚à£=0) (Œªx:ùêÅ.x) true
T-ABS         : (‚à£Œì‚à£=0) Œªx:ùêÅ. x
T-VAR         : (‚à£Œì‚à£=1) x
T-TRUE        : (‚à£Œì‚à£=0) true
----------------   TYPE CHECKED !   ----------------
E-APPABS      : (Œªx:ùêÅ.x) true
SUBSTITUTE    : [x‚Ü¶s]t
----------------   EVAL FINISHED !  ----------------
true
  : ùêÅ


iszero (pred (3))
----------------------------------------------------
T-ISZERO      : (‚à£Œì‚à£=0) iszero (pred (3))
T-PRED        : (‚à£Œì‚à£=0) pred (3)
T-SUCC        : (‚à£Œì‚à£=0) 3
T-SUCC        : (‚à£Œì‚à£=0) 2
T-SUCC        : (‚à£Œì‚à£=0) 1
T-ZERO        : (‚à£Œì‚à£=0) 0
----------------   TYPE CHECKED !   ----------------
E-ISZRO       : iszero (pred (3))
E-PREDSUC     : pred (3)
E-ISZROSUC    : iszero (2)
----------------   EVAL FINISHED !  ----------------
false
  : ùêÅ


let projx = Œªr:{x:ùêç,y:ùêç,z:ùêç}. r.x in projx {x=2,y=4,z=1}
----------------------------------------------------
T-LET         : (‚à£Œì‚à£=0) let projx = Œªr:{x:ùêç,y:ùêç,z:ùêç}. r.x
                             in
                             projx {x=2,y=4,z=1}
T-ABS         : (‚à£Œì‚à£=0) Œªr:{x:ùêç,y:ùêç,z:ùêç}. r.x
T-PROJ        : (‚à£Œì‚à£=1) r.x
T-VAR         : (‚à£Œì‚à£=1) r
T-APP         : (‚à£Œì‚à£=1) projx {x=2,y=4,z=1}
T-VAR         : (‚à£Œì‚à£=1) projx
T-RCD         : (‚à£Œì‚à£=1) {x=2, y=4, z=1}
T-SUCC        : (‚à£Œì‚à£=1) 2
T-SUCC        : (‚à£Œì‚à£=1) 1
T-ZERO        : (‚à£Œì‚à£=1) 0
T-SUCC        : (‚à£Œì‚à£=1) 4
T-SUCC        : (‚à£Œì‚à£=1) 3
T-SUCC        : (‚à£Œì‚à£=1) 2
T-SUCC        : (‚à£Œì‚à£=1) 1
T-ZERO        : (‚à£Œì‚à£=1) 0
T-SUCC        : (‚à£Œì‚à£=1) 1
T-ZERO        : (‚à£Œì‚à£=1) 0
----------------   TYPE CHECKED !   ----------------
E-LETV        : let projx = Œªr:{x:ùêç,y:ùêç,z:ùêç}. r.x
                in
                projx {x=2,y=4,z=1}
SUBSTITUTE    : [x‚Ü¶s]t
E-APPABS      : (Œªr:{x:ùêç,y:ùêç,z:ùêç}. r.x) {x=2,y=4,z=1}
SUBSTITUTE    : [x‚Ü¶s]t
E-PROJRCD     : {x=2,y=4,z=1}.x
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
2
  : ùêç


(Œªx:ùêí.x) "hoge"
----------------------------------------------------
T-APP         : (‚à£Œì‚à£=0) (Œªx:ùêí.x) "hoge"
T-ABS         : (‚à£Œì‚à£=0) Œªx:ùêí. x
T-VAR         : (‚à£Œì‚à£=1) x
T-STRING      : (‚à£Œì‚à£=0) "hoge"
----------------   TYPE CHECKED !   ----------------
E-APPABS      : (Œªx:ùêí.x) "hoge"
SUBSTITUTE    : [x‚Ü¶s]t
----------------   EVAL FINISHED !  ----------------
"hoge"
  : ùêí


case <some=1>  : <some:ùêç,none:ùêî> of
  | <some=a> ==> (succ a)
  | <none=y> ==> 0
  
----------------------------------------------------
T-CASE        : (‚à£Œì‚à£=0) case <some=1>  : <some:ùêç,none:ùêî> of
                               | <some=a> ==> (succ a)
                               | <none=y> ==> 0
                               
T-VARIANT     : (‚à£Œì‚à£=0) <some=1>  : <some:ùêç, none:ùêî>
T-SUCC        : (‚à£Œì‚à£=0) 1
T-ZERO        : (‚à£Œì‚à£=0) 0
T-SUCC        : (‚à£Œì‚à£=1) (succ a)
T-VAR         : (‚à£Œì‚à£=1) a
T-ZERO        : (‚à£Œì‚à£=1) 0
----------------   TYPE CHECKED !   ----------------
E-CASETAGV    : case <some=1>  : <some:ùêç,none:ùêî> of
                  | <some=a> ==> (succ a)
                  | <none=y> ==> 0
                  
SUBSTITUTE    : [x‚Ü¶s]t
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
2
  : ùêç


let g = Œªx:ùêç. (succ x) in g (1)
----------------------------------------------------
T-LET         : (‚à£Œì‚à£=0) let g = Œªx:ùêç. (succ x) in g (1)
T-ABS         : (‚à£Œì‚à£=0) Œªx:ùêç. (succ x)
T-SUCC        : (‚à£Œì‚à£=1) (succ x)
T-VAR         : (‚à£Œì‚à£=1) x
T-APP         : (‚à£Œì‚à£=1) g (1)
T-VAR         : (‚à£Œì‚à£=1) g
T-SUCC        : (‚à£Œì‚à£=1) 1
T-ZERO        : (‚à£Œì‚à£=1) 0
----------------   TYPE CHECKED !   ----------------
E-LETV        : let g = Œªx:ùêç. (succ x) in g (1)
SUBSTITUTE    : [x‚Ü¶s]t
E-APPABS      : (Œªx:ùêç. (succ x)) (1)
SUBSTITUTE    : [x‚Ü¶s]t
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
2
  : ùêç


let f = Œªx:<some:ùêç,none:ùêî>.
          case x of | <some=a> ==> (succ a) | <none=y> ==> 0 
in
f <some=1>  : <some:ùêç,none:ùêî>
----------------------------------------------------
T-LET         : (‚à£Œì‚à£=0) let f = Œªx:<some:ùêç,none:ùêî>.
                                       case x of
                                         | <some=a> ==> (succ a)
                                         | <none=y> ==> 0
                                         
                             in
                             f <some=1>  : <some:ùêç,none:ùêî>
T-ABS         : (‚à£Œì‚à£=0) Œªx:<some:ùêç,none:ùêî>.
                               case x of
                                 | <some=a> ==> (succ a)
                                 | <none=y> ==> 0
                                 
T-CASE        : (‚à£Œì‚à£=1) case x of | <some=a> ==> (succ a) | <none=y> ==> 0 
T-VAR         : (‚à£Œì‚à£=1) x
T-SUCC        : (‚à£Œì‚à£=2) (succ a)
T-VAR         : (‚à£Œì‚à£=2) a
T-ZERO        : (‚à£Œì‚à£=2) 0
T-APP         : (‚à£Œì‚à£=1) f <some=1>  : <some:ùêç,none:ùêî>
T-VAR         : (‚à£Œì‚à£=1) f
T-VARIANT     : (‚à£Œì‚à£=1) <some=1>  : <some:ùêç, none:ùêî>
T-SUCC        : (‚à£Œì‚à£=1) 1
T-ZERO        : (‚à£Œì‚à£=1) 0
----------------   TYPE CHECKED !   ----------------
E-LETV        : let f = Œªx:<some:ùêç,none:ùêî>.
                          case x of | <some=a> ==> (succ a) | <none=y> ==> 0 
                in
                f <some=1>  : <some:ùêç,none:ùêî>
SUBSTITUTE    : [x‚Ü¶s]t
E-APPABS      : (Œªx:<some:ùêç,none:ùêî>.
                   case x of | <some=a> ==> (succ a) | <none=y> ==> 0 )
                <some=1>  : <some:ùêç,none:ùêî>
SUBSTITUTE    : [x‚Ü¶s]t
E-CASETAGV    : case <some=1>  : <some:ùêç,none:ùêî> of
                  | <some=a> ==> (succ a)
                  | <none=y> ==> 0
                  
SUBSTITUTE    : [x‚Ü¶s]t
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
2
  : ùêç

X = ùêç
----------------   BINDING...   --------------------
----------------   BIND DONE !  --------------------



(Œªx:X. (succ x)) (1)
----------------------------------------------------
T-APP         : (‚à£Œì‚à£=1) (Œªx:X. (succ x)) (1)
T-ABS         : (‚à£Œì‚à£=1) Œªx:X. (succ x)
T-SUCC        : (‚à£Œì‚à£=2) (succ x)
T-VAR         : (‚à£Œì‚à£=2) x
T-SUCC        : (‚à£Œì‚à£=1) 1
T-ZERO        : (‚à£Œì‚à£=1) 0
----------------   TYPE CHECKED !   ----------------
E-APPABS      : (Œªx:X. (succ x)) (1)
SUBSTITUTE    : [x‚Ü¶s]t
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
2
  : ùêç

Y = X ‚Üí X
----------------   BINDING...   --------------------
----------------   BIND DONE !  --------------------


s = Œªx:X. (succ x)
----------------   BINDING...   --------------------
T-ABS         : (‚à£Œì‚à£=2) Œªx:X. (succ x)
T-SUCC        : (‚à£Œì‚à£=3) (succ x)
T-VAR         : (‚à£Œì‚à£=3) x
----------------   BIND DONE !  --------------------


double = Œªf:Y. Œªx:X. f (f x)
----------------   BINDING...   --------------------
T-ABS         : (‚à£Œì‚à£=3) Œªf:Y. Œªx:X. f (f x)
T-ABS         : (‚à£Œì‚à£=4) Œªx:X. f (f x)
T-APP         : (‚à£Œì‚à£=5) f (f x)
T-VAR         : (‚à£Œì‚à£=5) f
T-APP         : (‚à£Œì‚à£=5) f x
T-VAR         : (‚à£Œì‚à£=5) f
T-VAR         : (‚à£Œì‚à£=5) x
----------------   BIND DONE !  --------------------



double s (1)
----------------------------------------------------
T-APP         : (‚à£Œì‚à£=4) double s (1)
T-APP         : (‚à£Œì‚à£=4) double s
T-VAR         : (‚à£Œì‚à£=4) double
T-VAR         : (‚à£Œì‚à£=4) s
T-SUCC        : (‚à£Œì‚à£=4) 1
T-ZERO        : (‚à£Œì‚à£=4) 0
----------------   TYPE CHECKED !   ----------------
E-APP2        : double s (1)
E-APP2        : double s
E-VAR         : double
E-APP2        : (Œªf:Y. Œªx:X. f (f x)) s (1)
E-APP1        : (Œªf:Y. Œªx:X. f (f x)) s
E-VAR         : s
E-APP2        : (Œªf:Y. Œªx:X. f (f x)) (Œªx:X. (succ x)) (1)
E-APPABS      : (Œªf:Y. Œªx:X. f (f x)) (Œªx:X. (succ x))
SUBSTITUTE    : [x‚Ü¶s]t
E-APPABS      : (Œªx:X. (Œªx':X. (succ x')) ((Œªx':X. (succ x')) x)) (1)
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªx:X. (succ x)) ((Œªx:X. (succ x)) (1))
E-APPABS      : (Œªx:X. (succ x)) (1)
SUBSTITUTE    : [x‚Ü¶s]t
E-APPABS      : (Œªx:X. (succ x)) (2)
SUBSTITUTE    : [x‚Ü¶s]t
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
3
  : X

ff = Œªie:ùêç‚ÜíùêÅ.
       Œªx:ùêç.
         if iszero x
         then true
         else if iszero (pred x) then false else ie (pred (pred x))
----------------   BINDING...   --------------------
T-ABS         : (‚à£Œì‚à£=4) Œªie:ùêç‚ÜíùêÅ.
                               Œªx:ùêç.
                                 if iszero x
                                 then true
                                 else if iszero (pred x)
                                      then false
                                      else ie (pred (pred x))
T-ABS         : (‚à£Œì‚à£=5) Œªx:ùêç.
                               if iszero x
                               then true
                               else if iszero (pred x)
                                    then false
                                    else ie (pred (pred x))
T-IF          : (‚à£Œì‚à£=6) if iszero x
                             then true
                             else if iszero (pred x)
                                  then false
                                  else ie (pred (pred x))
T-ISZERO      : (‚à£Œì‚à£=6) iszero x
T-VAR         : (‚à£Œì‚à£=6) x
T-TRUE        : (‚à£Œì‚à£=6) true
T-IF          : (‚à£Œì‚à£=6) if iszero (pred x)
                             then false
                             else ie (pred (pred x))
T-ISZERO      : (‚à£Œì‚à£=6) iszero (pred x)
T-PRED        : (‚à£Œì‚à£=6) pred x
T-VAR         : (‚à£Œì‚à£=6) x
T-FALSE       : (‚à£Œì‚à£=6) false
T-APP         : (‚à£Œì‚à£=6) ie (pred (pred x))
T-VAR         : (‚à£Œì‚à£=6) ie
T-PRED        : (‚à£Œì‚à£=6) pred (pred x)
T-PRED        : (‚à£Œì‚à£=6) pred x
T-VAR         : (‚à£Œì‚à£=6) x
----------------   BIND DONE !  --------------------


iseven = fix ff
----------------   BINDING...   --------------------
T-FIX         : (‚à£Œì‚à£=5) fix ff
T-VAR         : (‚à£Œì‚à£=5) ff
E-FIX         : fix ff
E-VAR         : ff
E-FIXBETA     : fix (Œªie:ùêç‚ÜíùêÅ.
                       Œªx:ùêç.
                         if iszero x
                         then true
                         else if iszero (pred x)
                              then false
                              else ie (pred (pred x)))
SUBSTITUTE    : [x‚Ü¶s]t
----------------   BIND DONE !  --------------------



iseven (7)
----------------------------------------------------
T-APP         : (‚à£Œì‚à£=6) iseven (7)
T-VAR         : (‚à£Œì‚à£=6) iseven
T-SUCC        : (‚à£Œì‚à£=6) 7
T-SUCC        : (‚à£Œì‚à£=6) 6
T-SUCC        : (‚à£Œì‚à£=6) 5
T-SUCC        : (‚à£Œì‚à£=6) 4
T-SUCC        : (‚à£Œì‚à£=6) 3
T-SUCC        : (‚à£Œì‚à£=6) 2
T-SUCC        : (‚à£Œì‚à£=6) 1
T-ZERO        : (‚à£Œì‚à£=6) 0
----------------   TYPE CHECKED !   ----------------
E-APP2        : iseven (7)
E-VAR         : iseven
E-APPABS      : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (7)
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero (7)
                then true
                else if iszero (pred (7))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (7)))
E-ISZROSUC    : iszero (7)
E-IFFLASE     : if false
                then true
                else if iszero (pred (7))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (7)))
E-IF          : if iszero (pred (7))
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (7)))
E-ISZRO       : iszero (pred (7))
E-PREDSUC     : pred (7)
E-IF          : if iszero (6)
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (7)))
E-ISZROSUC    : iszero (6)
E-IFFLASE     : if false
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (7)))
E-APP2        : fix (Œªie:ùêç‚ÜíùêÅ.
                       Œªx:ùêç.
                         if iszero x
                         then true
                         else if iszero (pred x)
                              then false
                              else ie (pred (pred x)))
                (pred (pred (7)))
E-FIXBETA     : fix (Œªie:ùêç‚ÜíùêÅ.
                       Œªx:ùêç.
                         if iszero x
                         then true
                         else if iszero (pred x)
                              then false
                              else ie (pred (pred x)))
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (pred (pred (7)))
E-PRED        : pred (pred (7))
E-PREDSUC     : pred (7)
E-APP1        : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (pred (6))
E-PREDSUC     : pred (6)
E-APPABS      : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (5)
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero (5)
                then true
                else if iszero (pred (5))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (5)))
E-ISZROSUC    : iszero (5)
E-IFFLASE     : if false
                then true
                else if iszero (pred (5))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (5)))
E-IF          : if iszero (pred (5))
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (5)))
E-ISZRO       : iszero (pred (5))
E-PREDSUC     : pred (5)
E-IF          : if iszero (4)
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (5)))
E-ISZROSUC    : iszero (4)
E-IFFLASE     : if false
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (5)))
E-APP2        : fix (Œªie:ùêç‚ÜíùêÅ.
                       Œªx:ùêç.
                         if iszero x
                         then true
                         else if iszero (pred x)
                              then false
                              else ie (pred (pred x)))
                (pred (pred (5)))
E-FIXBETA     : fix (Œªie:ùêç‚ÜíùêÅ.
                       Œªx:ùêç.
                         if iszero x
                         then true
                         else if iszero (pred x)
                              then false
                              else ie (pred (pred x)))
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (pred (pred (5)))
E-PRED        : pred (pred (5))
E-PREDSUC     : pred (5)
E-APP1        : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (pred (4))
E-PREDSUC     : pred (4)
E-APPABS      : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (3)
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero (3)
                then true
                else if iszero (pred (3))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (3)))
E-ISZROSUC    : iszero (3)
E-IFFLASE     : if false
                then true
                else if iszero (pred (3))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (3)))
E-IF          : if iszero (pred (3))
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (3)))
E-ISZRO       : iszero (pred (3))
E-PREDSUC     : pred (3)
E-IF          : if iszero (2)
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (3)))
E-ISZROSUC    : iszero (2)
E-IFFLASE     : if false
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (3)))
E-APP2        : fix (Œªie:ùêç‚ÜíùêÅ.
                       Œªx:ùêç.
                         if iszero x
                         then true
                         else if iszero (pred x)
                              then false
                              else ie (pred (pred x)))
                (pred (pred (3)))
E-FIXBETA     : fix (Œªie:ùêç‚ÜíùêÅ.
                       Œªx:ùêç.
                         if iszero x
                         then true
                         else if iszero (pred x)
                              then false
                              else ie (pred (pred x)))
SUBSTITUTE    : [x‚Ü¶s]t
E-APP1        : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (pred (pred (3)))
E-PRED        : pred (pred (3))
E-PREDSUC     : pred (3)
E-APP1        : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (pred (2))
E-PREDSUC     : pred (2)
E-APPABS      : (Œªx:ùêç.
                   if iszero x
                   then true
                   else if iszero (pred x)
                        then false
                        else fix (Œªie:ùêç‚ÜíùêÅ.
                                    Œªx':ùêç.
                                      if iszero x'
                                      then true
                                      else if iszero (pred x')
                                           then false
                                           else ie (pred (pred x')))
                             (pred (pred x)))
                (1)
SUBSTITUTE    : [x‚Ü¶s]t
E-IF          : if iszero (1)
                then true
                else if iszero (pred (1))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (1)))
E-ISZROSUC    : iszero (1)
E-IFFLASE     : if false
                then true
                else if iszero (pred (1))
                     then false
                     else fix (Œªie:ùêç‚ÜíùêÅ.
                                 Œªx:ùêç.
                                   if iszero x
                                   then true
                                   else if iszero (pred x)
                                        then false
                                        else ie (pred (pred x)))
                          (pred (pred (1)))
E-IF          : if iszero (pred (1))
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (1)))
E-ISZRO       : iszero (pred (1))
E-PREDSUC     : pred (1)
E-IF          : if iszero 0
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (1)))
E-ISZROZRO    : iszero 0
E-IFTRUE      : if true
                then false
                else fix (Œªie:ùêç‚ÜíùêÅ.
                            Œªx:ùêç.
                              if iszero x
                              then true
                              else if iszero (pred x)
                                   then false
                                   else ie (pred (pred x)))
                     (pred (pred (1)))
----------------   EVAL FINISHED !  ----------------
false
  : ùêÅ

