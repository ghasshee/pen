
let fac = fix (λfac:𝐍→𝐍. λn. if iszero n then 1 else n * fac (pred n))
in
fac 5
----------------------------------------------------
CT-LETPOLY-ALG: (|Γ|=0) let fac = fix (λfac:𝐍→𝐍.
                                          λn.
                                            if iszero n
                                            then 1
                                            else n * fac (pred n))
                         in
                         fac 5
CT-FIX         : (|Γ|=0) fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n))
CT-ABS        : (|Γ|=0) λfac:𝐍→𝐍.
                           λn. if iszero n then 1 else n * fac (pred n)
CT-ABS(UNTYPE): (|Γ|=1) λn. if iszero n then 1 else n * fac (pred n)
CT-IF         : (|Γ|=2) if iszero n then 1 else n * fac (pred n)
CT-ISZERO     : (|Γ|=2) iszero n
CT-VAR        : (|Γ|=2) n
CT-SUCC       : (|Γ|=2) 1
CT-ZERO       : (|Γ|=2) 0
CT-TIMES      : (|Γ|=2) n * fac (pred n)
CT-VAR        : (|Γ|=2) n
CT-APP        : (|Γ|=2) fac (pred n)
CT-VAR        : (|Γ|=2) fac
CT-PRED       : (|Γ|=2) pred n
CT-VAR        : (|Γ|=2) n
SIMPLIFYTY    : (𝐍→𝐍) → (?X0 → 𝐍)
UNIFY: 𝐍→𝐍, ?X0→𝐍
UNIFY: 𝐍, ?X0
UNIFY: 𝐍, 𝐍
UNIFY: 𝐁, 𝐁
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍→𝐍, 𝐍→?X1
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, ?X1
UNIFY: 𝐍, 𝐍
SIMPLIFYTY    : 𝐍 → 𝐍
SIMPLIFYTY    : 𝐍 → 𝐍
SIMPLIFYTY    : 𝐍
SIMPLIFYTY    : 𝐍
SIMPLIFYTY    : 𝐍
SIMPLIFYTY    : 𝐍
UNIFY: 𝐁, 𝐁
UNIFY: 𝐍, 𝐍
UNIFY: ?X0, 𝐍
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍→𝐍, 𝐍→?X1
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, ?X1
UNIFY: 𝐍, 𝐍
CT-APP        : (|Γ|=1) ?X2 5
CT-VAR        : (|Γ|=1) ?X2
CT-SUCC       : (|Γ|=1) 5
CT-SUCC       : (|Γ|=1) 4
CT-SUCC       : (|Γ|=1) 3
CT-SUCC       : (|Γ|=1) 2
CT-SUCC       : (|Γ|=1) 1
CT-ZERO       : (|Γ|=1) 0
----------------   TYPE CHECKED !   ----------------
E-LET         : let fac = fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n))
                in
                fac 5
E-FIXBETA     : fix (λfac:𝐍→𝐍.
                       λn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x↦s]t
E-LETV        : let fac = λn.
                            if iszero n
                            then 1
                            else n * (fix (λfac:𝐍→𝐍.
                                             λn'.
                                               if iszero n'
                                               then 1
                                               else n' * fac (pred n')))
                                     (pred n)
                in
                fac 5
SUBSTITUTE    : [x↦s]t
E-APPABS      : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                5
SUBSTITUTE    : [x↦s]t
E-IF          : if iszero 5
                then 1
                else 5 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 5)
E-ISZROSUC    : iszero 5
E-IFFLASE     : if false
                then 1
                else 5 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 5)
E-TIMES       : 5 * (fix (λfac:𝐍→𝐍.
                            λn. if iszero n then 1 else n * fac (pred n)))
                    (pred 5)
E-SUCC        : 5
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-APPFIX      : (fix (λfac:𝐍→𝐍.
                        λn. if iszero n then 1 else n * fac (pred n)))
                (pred 5)
E-FIXBETA     : fix (λfac:𝐍→𝐍.
                       λn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x↦s]t
E-APP1        : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 5)
E-PREDSUC     : pred 5
E-APPABS      : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                4
SUBSTITUTE    : [x↦s]t
E-IF          : if iszero 4
                then 1
                else 4 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 4)
E-ISZROSUC    : iszero 4
E-IFFLASE     : if false
                then 1
                else 4 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 4)
E-TIMES       : 4 * (fix (λfac:𝐍→𝐍.
                            λn. if iszero n then 1 else n * fac (pred n)))
                    (pred 4)
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-APPFIX      : (fix (λfac:𝐍→𝐍.
                        λn. if iszero n then 1 else n * fac (pred n)))
                (pred 4)
E-FIXBETA     : fix (λfac:𝐍→𝐍.
                       λn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x↦s]t
E-APP1        : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 4)
E-PREDSUC     : pred 4
E-APPABS      : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                3
SUBSTITUTE    : [x↦s]t
E-IF          : if iszero 3
                then 1
                else 3 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 3)
E-ISZROSUC    : iszero 3
E-IFFLASE     : if false
                then 1
                else 3 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 3)
E-TIMES       : 3 * (fix (λfac:𝐍→𝐍.
                            λn. if iszero n then 1 else n * fac (pred n)))
                    (pred 3)
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-APPFIX      : (fix (λfac:𝐍→𝐍.
                        λn. if iszero n then 1 else n * fac (pred n)))
                (pred 3)
E-FIXBETA     : fix (λfac:𝐍→𝐍.
                       λn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x↦s]t
E-APP1        : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 3)
E-PREDSUC     : pred 3
E-APPABS      : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                2
SUBSTITUTE    : [x↦s]t
E-IF          : if iszero 2
                then 1
                else 2 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 2)
E-ISZROSUC    : iszero 2
E-IFFLASE     : if false
                then 1
                else 2 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 2)
E-TIMES       : 2 * (fix (λfac:𝐍→𝐍.
                            λn. if iszero n then 1 else n * fac (pred n)))
                    (pred 2)
E-SUCC        : 2
E-SUCC        : 1
E-APPFIX      : (fix (λfac:𝐍→𝐍.
                        λn. if iszero n then 1 else n * fac (pred n)))
                (pred 2)
E-FIXBETA     : fix (λfac:𝐍→𝐍.
                       λn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x↦s]t
E-APP1        : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 2)
E-PREDSUC     : pred 2
E-APPABS      : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                1
SUBSTITUTE    : [x↦s]t
E-IF          : if iszero 1
                then 1
                else 1 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 1)
E-ISZROSUC    : iszero 1
E-IFFLASE     : if false
                then 1
                else 1 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 1)
E-TIMES       : 1 * (fix (λfac:𝐍→𝐍.
                            λn. if iszero n then 1 else n * fac (pred n)))
                    (pred 1)
E-SUCC        : 1
E-APPFIX      : (fix (λfac:𝐍→𝐍.
                        λn. if iszero n then 1 else n * fac (pred n)))
                (pred 1)
E-FIXBETA     : fix (λfac:𝐍→𝐍.
                       λn. if iszero n then 1 else n * fac (pred n))
SUBSTITUTE    : [x↦s]t
E-APP1        : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                (pred 1)
E-PREDSUC     : pred 1
E-APPABS      : (λn.
                   if iszero n
                   then 1
                   else n * (fix (λfac:𝐍→𝐍.
                                    λn'.
                                      if iszero n'
                                      then 1
                                      else n' * fac (pred n')))
                            (pred n))
                0
SUBSTITUTE    : [x↦s]t
E-IF          : if iszero 0
                then 1
                else 0 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 0)
E-ISZROZRO    : iszero 0
E-IFTRUE      : if true
                then 1
                else 0 * (fix (λfac:𝐍→𝐍.
                                 λn. if iszero n then 1 else n * fac (pred n)))
                         (pred 0)
E-SUCC        : 1
E-SUCC        : 1
E-SUCC        : 2
E-SUCC        : 1
E-SUCC        : 6
E-SUCC        : 5
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-SUCC        : 24
E-SUCC        : 23
E-SUCC        : 22
E-SUCC        : 21
E-SUCC        : 20
E-SUCC        : 19
E-SUCC        : 18
E-SUCC        : 17
E-SUCC        : 16
E-SUCC        : 15
E-SUCC        : 14
E-SUCC        : 13
E-SUCC        : 12
E-SUCC        : 11
E-SUCC        : 10
E-SUCC        : 9
E-SUCC        : 8
E-SUCC        : 7
E-SUCC        : 6
E-SUCC        : 5
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
E-SUCC        : 120
E-SUCC        : 119
E-SUCC        : 118
E-SUCC        : 117
E-SUCC        : 116
E-SUCC        : 115
E-SUCC        : 114
E-SUCC        : 113
E-SUCC        : 112
E-SUCC        : 111
E-SUCC        : 110
E-SUCC        : 109
E-SUCC        : 108
E-SUCC        : 107
E-SUCC        : 106
E-SUCC        : 105
E-SUCC        : 104
E-SUCC        : 103
E-SUCC        : 102
E-SUCC        : 101
E-SUCC        : 100
E-SUCC        : 99
E-SUCC        : 98
E-SUCC        : 97
E-SUCC        : 96
E-SUCC        : 95
E-SUCC        : 94
E-SUCC        : 93
E-SUCC        : 92
E-SUCC        : 91
E-SUCC        : 90
E-SUCC        : 89
E-SUCC        : 88
E-SUCC        : 87
E-SUCC        : 86
E-SUCC        : 85
E-SUCC        : 84
E-SUCC        : 83
E-SUCC        : 82
E-SUCC        : 81
E-SUCC        : 80
E-SUCC        : 79
E-SUCC        : 78
E-SUCC        : 77
E-SUCC        : 76
E-SUCC        : 75
E-SUCC        : 74
E-SUCC        : 73
E-SUCC        : 72
E-SUCC        : 71
E-SUCC        : 70
E-SUCC        : 69
E-SUCC        : 68
E-SUCC        : 67
E-SUCC        : 66
E-SUCC        : 65
E-SUCC        : 64
E-SUCC        : 63
E-SUCC        : 62
E-SUCC        : 61
E-SUCC        : 60
E-SUCC        : 59
E-SUCC        : 58
E-SUCC        : 57
E-SUCC        : 56
E-SUCC        : 55
E-SUCC        : 54
E-SUCC        : 53
E-SUCC        : 52
E-SUCC        : 51
E-SUCC        : 50
E-SUCC        : 49
E-SUCC        : 48
E-SUCC        : 47
E-SUCC        : 46
E-SUCC        : 45
E-SUCC        : 44
E-SUCC        : 43
E-SUCC        : 42
E-SUCC        : 41
E-SUCC        : 40
E-SUCC        : 39
E-SUCC        : 38
E-SUCC        : 37
E-SUCC        : 36
E-SUCC        : 35
E-SUCC        : 34
E-SUCC        : 33
E-SUCC        : 32
E-SUCC        : 31
E-SUCC        : 30
E-SUCC        : 29
E-SUCC        : 28
E-SUCC        : 27
E-SUCC        : 26
E-SUCC        : 25
E-SUCC        : 24
E-SUCC        : 23
E-SUCC        : 22
E-SUCC        : 21
E-SUCC        : 20
E-SUCC        : 19
E-SUCC        : 18
E-SUCC        : 17
E-SUCC        : 16
E-SUCC        : 15
E-SUCC        : 14
E-SUCC        : 13
E-SUCC        : 12
E-SUCC        : 11
E-SUCC        : 10
E-SUCC        : 9
E-SUCC        : 8
E-SUCC        : 7
E-SUCC        : 6
E-SUCC        : 5
E-SUCC        : 4
E-SUCC        : 3
E-SUCC        : 2
E-SUCC        : 1
----------------   EVAL FINISHED !  ----------------
{𝐍→𝐍=𝐍→?X3, 𝐍=𝐍, 𝐍=𝐍, 𝐍=𝐍, 𝐍=𝐍, 𝐍=𝐍}
----------------  CONSTRAINTS LIST  ----------------
UNIFY: 𝐍→𝐍, 𝐍→?X3
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, ?X3
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, 𝐍
UNIFY: 𝐍, 𝐍
{?X3=𝐍}
----------------   SOLUTION FOUND ! ----------------
120
  : 𝐍

