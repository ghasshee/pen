// Based on http://www.blunderingcode.com/ether-vaults/

contract Vault(address vaultKey, address recoveryKey) {
  case(void unvault(u256 _amount, address _hotWallet)) {
    if (sender(msg) != vaultKey) abort;
    u256 unvaultPeriod = 2; // two seconds
    if (now(block) + unvaultPeriod < now(block)) abort;
    return then become UnVaulting(now(block) + unvaultPeriod, _amount, _hotWallet, vaultKey, recoveryKey);
  }
  case(void destroy()) {
    if (sender(msg) != recoveryKey) abort;
    return then become Destroyed();
  }
  default {
    return then become Vault(vaultKey, recoveryKey);
  }
}

contract UnVaulting(u256 redeemtime, u256 amount, address hotWallet, address vaultKey, address recoveryKey) {
  case(void redeem()) {
    if (amount > balance(this)) abort;
    void = hotWallet.default() with amount reentrance { abort; };
    return then become Vault(vaultKey, recoveryKey);
  }
  case(void recover()) {
    if (sender(msg) != recoveryKey) abort;
    return then become Vault(vaultKey, recoveryKey);
  }
  case(void destroy()) {
    if (sender(msg) != recoveryKey) abort;
    return then become Destroyed();
  }
  default {
    return then become UnVaulting(redeemtime, amount, hotWallet, vaultKey, recoveryKey);
  }
}

contract Destroyed() {
  // any call just throws;
}
