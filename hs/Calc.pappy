parser Calc: 


top Expr



-- Expr

Expr :: Int =   Spacing v:Plus !Char -> { v } 

Plus :: Int =   l:Plus  "+":Op  r:Mult  -> { l + r      } 
            /   l:Plus  "-":Op  r:Mult  -> { l - r      }
            /   v:Mult                  -> { v          } 

Mult :: Int =   l:Mult  "*":Op  r:Prim  -> { l * r      }
            /   l:Mult  "/":Op  r:Prim  -> { l `div` r  }
            /   v:Prim                  -> { v          }

Prim :: Int =   v:Dcml                  -> { v          }

Dcml :: Int =   v:Digits Spacing        -> { v          } 

Digits :: Int   =   v:Digits d:Digit        -> { v * 10 + d }
                /   d:Digit                 -> { d }

Digit :: Int    =   c:Char  &{isDigit c}    -> { digitToInt c }

Op :: String    =   o:O Spacing             -> { o          } 

O :: String     =   "+"
                /   "-"
                /   "*"
                /   "/"

Spacing :: {()} = SpaceChar*        -> {()}
SpaceChar :: Char = c:Char      &{isSpace c}    -> { c }



{ 

eval :: String -> Int 
eval str = case calcExpr (calcParse "expr" str) of 
    Parsed v _ _ -> v 
    NoParse e -> error (show e)

}
