-- Parser generated by Pappy - do not edit
module Parser where

import Data.Char
import Pos
import Parse
 

import Syntax

keywords    =   [
                , "contract"
                , "method"   
                , "string" 
                , "u8"    
                , "u256"
                , "i8" 
                , "i256" 
                , "return" 
                , "if" 
                , "then"
                , "else" 
                , "let"
                , "letrec" 
                , "fix" 
                ]




data ParserDerivs = ParserDerivs {
	parserSub0 :: ParserDerivs0,
	parserSub1 :: ParserDerivs1,
	parserChar :: Result ParserDerivs Char,
	parserPos :: Pos
}

instance Derivs ParserDerivs where
	dvChar d = parserChar d
	dvPos d = parserPos d

data ParserDerivs0 = ParserDerivs0 {
	parserSubStarRule0 :: Result ParserDerivs ([()]),
	parserSubStarRule1 :: Result ParserDerivs ([Char]),
	parserSubStarRule2 :: Result ParserDerivs ([Char]),
	parserSubID :: Result ParserDerivs (String),
	parserSubStarRule3 :: Result ParserDerivs ([Char]),
	parserSubSym :: Result ParserDerivs (String),
	parserSubTopLevel :: Result ParserDerivs ([Top])}

data ParserDerivs1 = ParserDerivs1 {
	parserSubPTys :: Result ParserDerivs ([Ty]),
	parserSubTys :: Result ParserDerivs ([Ty]),
	parserSubTyTail :: Result ParserDerivs (( Ty  ->  Ty )),
	parserSubMthds :: Result ParserDerivs ([Mthd]),
	parserSubAppKTmTail :: Result ParserDerivs (( K Tm  ->  K Tm )),
	parserSubAKTm :: Result ParserDerivs ( K Tm )}

parserStarRule0 = parserSubStarRule0 . parserSub0
parserStarRule1 = parserSubStarRule1 . parserSub0
parserStarRule2 = parserSubStarRule2 . parserSub0
parserID = parserSubID . parserSub0
parserStarRule3 = parserSubStarRule3 . parserSub0
parserSym = parserSubSym . parserSub0
parserTopLevel = parserSubTopLevel . parserSub0
parserPTys = parserSubPTys . parserSub1
parserTys = parserSubTys . parserSub1
parserTyTail = parserSubTyTail . parserSub1
parserMthds = parserSubMthds . parserSub1
parserAppKTmTail = parserSubAppKTmTail . parserSub1
parserAKTm = parserSubAKTm . parserSub1

parserParse :: String -> String -> ParserDerivs
parserParse name text = parserDerivs (Pos name 1 1) text

parserDerivs :: Pos -> String -> ParserDerivs
parserDerivs pos text = dvs where
  dvs = ParserDerivs
    (parserDerivs0 dvs)
    (parserDerivs1 dvs)
    chr pos
  chr = case text of
    [] -> NoParse (eofError dvs)
    (c:cs) -> Parsed c (parserDerivs (nextPos pos c) cs) (nullError dvs)

parserDerivs0 dvs = ParserDerivs0
	(parserParseStarRule0 dvs)
	(parserParseStarRule1 dvs)
	(parserParseStarRule2 dvs)
	(parserParseID dvs)
	(parserParseStarRule3 dvs)
	(parserParseSym dvs)
	(parserParseTopLevel dvs)

parserDerivs1 dvs = ParserDerivs1
	(parserParsePTys dvs)
	(parserParseTys dvs)
	(parserParseTyTail dvs)
	(parserParseMthds dvs)
	(parserParseAppKTmTail dvs)
	(parserParseAKTm dvs)

parserParseStarRule0 :: ParserDerivs -> Result ParserDerivs ([()])
parserParseStarRule0 d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case pappyResult3 of
        Parsed v d3 e3 ->
          case parserStarRule0 d3 of
            Parsed vs d5 e5 ->
              Parsed (v : vs) d5 (maximum [e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        NoParse e3 -> pappyAlt1_2 (max e3 e1)
      where
        pappyResult3 =
          pappyAlt5_1 (ParseError (parserPos d) []) where
            pappyAlt5_1 e5 =
              case pappyResult7 of
                Parsed _ d7 e7 ->
                  Parsed (()) d7 (max e7 e5)
                NoParse e7 -> pappyAlt5_2 (max e7 e5)
              where
                pappyResult7 =
                  pappyAlt9_1 (ParseError (parserPos d) []) where
                    pappyAlt9_1 e9 =
                      case parserChar d of
                        r @ (Parsed ' ' _ _) -> r
                        _ -> pappyAlt9_2 e9
                    pappyAlt9_2 e9 =
                      case parserChar d of
                        r @ (Parsed '\t' _ _) -> r
                        _ -> pappyAlt9_3 e9
                    pappyAlt9_3 e9 =
                      case parserChar d of
                        r @ (Parsed '\f' _ _) -> r
                        _ -> pappyAlt9_4 e9
                    pappyAlt9_4 e9 =
                      case parserChar d of
                        Parsed '\n' d11 _ ->
                          Parsed (()) d11 e9
                        _ -> pappyAlt9_5 e9
                    pappyAlt9_5 e9 = NoParse e9
            pappyAlt5_2 e5 =
              case pappyResult7 of
                Parsed _ d7 e7 ->
                  Parsed (()) d7 (max e7 e5)
                NoParse e7 -> pappyAlt5_3 (max e7 e5)
              where
                pappyResult7 =
                  case parserChar d of
                    Parsed '{' d9 _ ->
                      case parserChar d9 of
                        Parsed '-' d11 _ ->
                          case parserChar d11 of
                            Parsed '-' d13 _ ->
                              case parserStarRule1 d13 of
                                Parsed _ d15 e15 ->
                                  case parserChar d15 of
                                    Parsed '-' d17 _ ->
                                      case parserChar d17 of
                                        Parsed '-' d19 _ ->
                                          case parserChar d19 of
                                            Parsed '}' d21 _ ->
                                              Parsed (()) d21 e15
                                            _ -> NoParse e15
                                        _ -> NoParse e15
                                    _ -> NoParse e15
                                NoParse e15 -> NoParse e15
                            _ -> NoParse (ParseError (parserPos d11) [])
                        _ -> NoParse (ParseError (parserPos d9) [])
                    Parsed '-' d9 _ ->
                      case parserChar d9 of
                        Parsed '-' d11 _ ->
                          case parserStarRule2 d11 of
                            Parsed _ d13 e13 ->
                              case parserChar d13 of
                                Parsed '\n' d15 _ ->
                                  Parsed (()) d15 e13
                                _ -> NoParse e13
                            NoParse e13 -> NoParse e13
                        _ -> NoParse (ParseError (parserPos d9) [])
                    _ -> NoParse (ParseError (parserPos d) [])
            pappyAlt5_3 e5 = NoParse e5
    pappyAlt1_2 e1 =
      Parsed ([]) d e1
    pappyAlt1_3 e1 = NoParse e1

parserParseStarRule1 :: ParserDerivs -> Result ParserDerivs ([Char])
parserParseStarRule1 d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case pappyResult3 of
        NoParse e3 ->
          case parserChar d of
            Parsed v d5 e5 ->
              case parserStarRule1 d5 of
                Parsed vs d7 e7 ->
                  Parsed (v : vs) d7 (maximum [e7,e5,e3,e1])
                NoParse e7 -> pappyAlt1_2 (maximum [e7,e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        Parsed _ _ e3 -> pappyAlt1_2 (max e3 e1)
      where
        pappyResult3 =
          case parserChar d of
            Parsed '-' d5 _ ->
              case parserChar d5 of
                Parsed '-' d7 _ ->
                  case parserChar d7 of
                    Parsed '}' d9 _ ->
                      Parsed ("--}") d9 (ParseError (parserPos d9) [])
                    _ -> NoParse (ParseError (parserPos d7) [])
                _ -> NoParse (ParseError (parserPos d5) [])
            _ -> NoParse (ParseError (parserPos d) [])
    pappyAlt1_2 e1 =
      Parsed ([]) d e1
    pappyAlt1_3 e1 = NoParse e1

parserParseStarRule2 :: ParserDerivs -> Result ParserDerivs ([Char])
parserParseStarRule2 d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case pappyResult3 of
        NoParse e3 ->
          case parserChar d of
            Parsed v d5 e5 ->
              case parserStarRule2 d5 of
                Parsed vs d7 e7 ->
                  Parsed (v : vs) d7 (maximum [e7,e5,e3,e1])
                NoParse e7 -> pappyAlt1_2 (maximum [e7,e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        Parsed _ _ e3 -> pappyAlt1_2 (max e3 e1)
      where
        pappyResult3 =
          case parserChar d of
            r @ (Parsed '\n' _ _) -> r
            _ -> NoParse (ParseError (parserPos d) [])
    pappyAlt1_2 e1 =
      Parsed ([]) d e1
    pappyAlt1_3 e1 = NoParse e1

parserParseID :: ParserDerivs -> Result ParserDerivs (String)
parserParseID d =
  case pappyResult1 of
    NoParse e1 ->
      case pappyResult3 of
        NoParse e3 ->
          case parserWord d of
            Parsed s d5 e5 ->
              Parsed (s) d5 (maximum [e5,e3,e1])
            NoParse e5 -> NoParse (maximum [e5,e3,e1])
        Parsed _ _ e3 -> NoParse (max e3 e1)
      where
        pappyResult3 =
          pappyAlt5_1 (ParseError (parserPos d) []) where
            pappyAlt5_1 e5 =
              case parserWord d of
                Parsed "true" d7 e7 ->
                  Parsed ( TmTRUE         ) d7 (max e7 e5)
                _ -> pappyAlt5_2 (max (ParseError (parserPos d) [Expected "true"]) e5)
            pappyAlt5_2 e5 =
              case parserWord d of
                Parsed "false" d7 e7 ->
                  Parsed ( TmFALSE        ) d7 (max e7 e5)
                _ -> pappyAlt5_3 (max (ParseError (parserPos d) [Expected "false"]) e5)
            pappyAlt5_3 e5 = NoParse e5
    Parsed _ _ e1 -> NoParse e1
  where
    pappyResult1 =
      case parserWord d of
        Parsed s d3 e3 ->
          case ( s `elem` keywords ) of
            True ->
              Parsed (s) d3 e3
            False -> NoParse e3
        NoParse e3 -> NoParse e3

parserParseStarRule3 :: ParserDerivs -> Result ParserDerivs ([Char])
parserParseStarRule3 d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case pappyResult3 of
        Parsed v d3 e3 ->
          case parserStarRule3 d3 of
            Parsed vs d5 e5 ->
              Parsed (v : vs) d5 (maximum [e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        NoParse e3 -> pappyAlt1_2 (max e3 e1)
      where
        pappyResult3 =
          pappyAlt5_1 (ParseError (parserPos d) []) where
            pappyAlt5_1 e5 =
              case parserChar d of
                Parsed c d7 e7 ->
                  case (isAlphaNum c) of
                    True ->
                      Parsed (c) d7 (max e7 e5)
                    False -> pappyAlt5_2 (max e7 e5)
                NoParse e7 -> pappyAlt5_2 (max e7 e5)
            pappyAlt5_2 e5 =
              case parserChar d of
                r @ (Parsed '_' _ _) -> r
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
    pappyAlt1_2 e1 =
      Parsed ([]) d e1
    pappyAlt1_3 e1 = NoParse e1

parserWord :: ParserDerivs -> Result ParserDerivs (String)
parserWord d =
  case pappyResult1 of
    Parsed c d1 e1 ->
      case parserStarRule3 d1 of
        Parsed cs d3 e3 ->
          case parserStarRule0 d3 of
            Parsed _ d5 e5 ->
              Parsed ( c:cs ) d5 (maximum [e5,e3,e1])
            NoParse e5 -> NoParse (maximum [e5,e3,e1])
        NoParse e3 -> NoParse (max e3 e1)
    NoParse e1 -> NoParse e1
  where
    pappyResult1 =
      pappyAlt3_1 (ParseError (parserPos d) []) where
        pappyAlt3_1 e3 =
          case parserChar d of
            Parsed c d5 e5 ->
              case (isAlpha c) of
                True ->
                  Parsed (c) d5 (max e5 e3)
                False -> pappyAlt3_2 (max e5 e3)
            NoParse e5 -> pappyAlt3_2 (max e5 e3)
        pappyAlt3_2 e3 =
          case parserChar d of
            r @ (Parsed '_' _ _) -> r
            _ -> pappyAlt3_3 e3
        pappyAlt3_3 e3 = NoParse e3

parserParseSym :: ParserDerivs -> Result ParserDerivs (String)
parserParseSym d =
  case pappyResult1 of
    Parsed s d1 e1 ->
      case parserStarRule0 d1 of
        Parsed _ d3 e3 ->
          Parsed (s) d3 (max e3 e1)
        NoParse e3 -> NoParse (max e3 e1)
    NoParse e1 -> NoParse e1
  where
    pappyResult1 =
      case parserChar d of
        Parsed '+' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("+") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '+' d7 _ ->
                  Parsed ("++") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '*' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("*") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '*' d7 _ ->
                  Parsed ("**") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '-' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("-") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '-' d7 _ ->
                  Parsed ("--") d7 e5
                Parsed '>' d7 _ ->
                  Parsed ("->") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '/' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("/") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '/' d7 _ ->
                  Parsed ("//") d7 e5
                Parsed '=' d7 _ ->
                  Parsed ("/=") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '&' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("&") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '&' d7 _ ->
                  Parsed ("&&") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '|' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("|") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '|' d7 _ ->
                  Parsed ("||") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '^' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("^") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '^' d7 _ ->
                  Parsed ("^^") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '%' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("%") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '%' d7 _ ->
                  Parsed ("%%") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '$' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("$") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '$' d7 _ ->
                  Parsed ("$$") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '@' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("@") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '@' d7 _ ->
                  Parsed ("@@") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '!' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("!") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '=' d7 _ ->
                  Parsed ("!=") d7 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '?' d3 _ ->
          Parsed ("?") d3 (ParseError (parserPos d3) [])
        Parsed '=' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("=") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '=' d7 _ ->
                  Parsed ("==") d7 e5
                Parsed '<' d7 _ ->
                  case parserChar d7 of
                    Parsed '<' d9 _ ->
                      Parsed ("=<<") d9 e5
                    _ -> pappyAlt5_3 e5
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '[' d3 _ ->
          Parsed ("[") d3 (ParseError (parserPos d3) [])
        Parsed ']' d3 _ ->
          Parsed ("]") d3 (ParseError (parserPos d3) [])
        Parsed '{' d3 _ ->
          Parsed ("{") d3 (ParseError (parserPos d3) [])
        Parsed '}' d3 _ ->
          Parsed ("}") d3 (ParseError (parserPos d3) [])
        Parsed '(' d3 _ ->
          Parsed ("(") d3 (ParseError (parserPos d3) [])
        Parsed ')' d3 _ ->
          Parsed (")") d3 (ParseError (parserPos d3) [])
        Parsed '<' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed ("<") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '=' d7 _ ->
                  Parsed ("<=") d7 e5
                Parsed '<' d7 _ ->
                  pappyAlt9_1 e5 where
                    pappyAlt9_1 e9 =
                      Parsed ("<<") d7 e9
                    pappyAlt9_2 e9 =
                      case parserChar d7 of
                        Parsed '<' d11 _ ->
                          Parsed ("<<<") d11 e9
                        _ -> pappyAlt9_3 e9
                    pappyAlt9_3 e9 = pappyAlt5_3 e9
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '>' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed (">") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '=' d7 _ ->
                  Parsed (">=") d7 e5
                Parsed '>' d7 _ ->
                  pappyAlt9_1 e5 where
                    pappyAlt9_1 e9 =
                      Parsed (">>") d7 e9
                    pappyAlt9_2 e9 =
                      case parserChar d7 of
                        Parsed '=' d11 _ ->
                          Parsed (">>=") d11 e9
                        Parsed '>' d11 _ ->
                          Parsed (">>>") d11 e9
                        _ -> pappyAlt9_3 e9
                    pappyAlt9_3 e9 = pappyAlt5_3 e9
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed '.' d3 _ ->
          pappyAlt5_1 (ParseError (parserPos d3) []) where
            pappyAlt5_1 e5 =
              Parsed (".") d3 e5
            pappyAlt5_2 e5 =
              case parserChar d3 of
                Parsed '.' d7 _ ->
                  pappyAlt9_1 e5 where
                    pappyAlt9_1 e9 =
                      Parsed ("..") d7 e9
                    pappyAlt9_2 e9 =
                      case parserChar d7 of
                        Parsed '.' d11 _ ->
                          pappyAlt13_1 e9 where
                            pappyAlt13_1 e13 =
                              Parsed ("...") d11 e13
                            pappyAlt13_2 e13 =
                              case parserChar d11 of
                                Parsed '.' d15 _ ->
                                  Parsed ("....") d15 e13
                                _ -> pappyAlt13_3 e13
                            pappyAlt13_3 e13 = pappyAlt9_3 e13
                        _ -> pappyAlt9_3 e9
                    pappyAlt9_3 e9 = pappyAlt5_3 e9
                _ -> pappyAlt5_3 e5
            pappyAlt5_3 e5 = NoParse e5
        Parsed ',' d3 _ ->
          Parsed (",") d3 (ParseError (parserPos d3) [])
        _ -> NoParse (ParseError (parserPos d) [])

parserParseTopLevel :: ParserDerivs -> Result ParserDerivs ([Top])
parserParseTopLevel d =
  case parserStarRule0 d of
    Parsed _ d1 e1 ->
      case pappyResult3 of
        Parsed t d3 e3 ->
          case parserStarRule0 d3 of
            Parsed _ d5 e5 ->
              case parserTopLevel d5 of
                Parsed ts d7 e7 ->
                  case parserChar d7 of
                    NoParse e9 ->
                      Parsed ( t:ts           ) d7 (maximum [e9,e7,e5,e3,e1])
                    Parsed _ _ e9 -> NoParse (maximum [e9,e7,e5,e3,e1])
                NoParse e7 -> NoParse (maximum [e7,e5,e3,e1])
            NoParse e5 -> NoParse (maximum [e5,e3,e1])
        NoParse e3 -> NoParse (max e3 e1)
      where
        pappyResult3 =
          pappyAlt5_1 (ParseError (parserPos d1) []) where
            pappyAlt5_1 e5 =
              case parserWord d1 of
                Parsed "contract" d7 e7 ->
                  case parserID d7 of
                    Parsed id d9 e9 ->
                      case parserParams d9 of
                        Parsed ps d11 e11 ->
                          case parserSym d11 of
                            Parsed "{" d13 e13 ->
                              case parserMthds d13 of
                                Parsed ms d15 e15 ->
                                  case parserSym d15 of
                                    Parsed "}" d17 e17 ->
                                      Parsed ( CN id ps ms    ) d17 (maximum [e17,e15,e13,e11,e9,e7,e5])
                                    _ -> pappyAlt5_2 (maximum [(ParseError (parserPos d15) [Expected "}"]),e15,e13,e11,e9,e7,e5])
                                NoParse e15 -> pappyAlt5_2 (maximum [e15,e13,e11,e9,e7,e5])
                            _ -> pappyAlt5_2 (maximum [(ParseError (parserPos d11) [Expected "{"]),e11,e9,e7,e5])
                        NoParse e11 -> pappyAlt5_2 (maximum [e11,e9,e7,e5])
                    NoParse e9 -> pappyAlt5_2 (maximum [e9,e7,e5])
                _ -> pappyAlt5_2 (max (ParseError (parserPos d1) [Expected "contract"]) e5)
            pappyAlt5_2 e5 =
              case parserWord d1 of
                Parsed "event" d7 e7 ->
                  case parserID d7 of
                    Parsed id d9 e9 ->
                      case parserParams d9 of
                        Parsed ps d11 e11 ->
                          Parsed ( EV id ps       ) d11 (maximum [e11,e9,e7,e5])
                        NoParse e11 -> pappyAlt5_3 (maximum [e11,e9,e7,e5])
                    NoParse e9 -> pappyAlt5_3 (maximum [e9,e7,e5])
                _ -> pappyAlt5_3 (max (ParseError (parserPos d1) [Expected "event"]) e5)
            pappyAlt5_3 e5 = NoParse e5
    NoParse e1 -> NoParse e1

parserParams :: ParserDerivs -> Result ParserDerivs ([Ty])
parserParams d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case parserSym d of
        Parsed "(" d3 e3 ->
          case parserPTys d3 of
            Parsed ps d5 e5 ->
              case parserSym d5 of
                Parsed ")" d7 e7 ->
                  Parsed ( ps ) d7 (maximum [e7,e5,e3,e1])
                _ -> pappyAlt1_2 (maximum [(ParseError (parserPos d5) [Expected ")"]),e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        _ -> pappyAlt1_2 (max (ParseError (parserPos d) [Expected "("]) e1)
    pappyAlt1_2 e1 =
      case parserSym d of
        Parsed "(" d3 e3 ->
          case parserSym d3 of
            Parsed ")" d5 e5 ->
              Parsed ( [] ) d5 (maximum [e5,e3,e1])
            _ -> pappyAlt1_3 (maximum [(ParseError (parserPos d3) [Expected ")"]),e3,e1])
        _ -> pappyAlt1_3 (max (ParseError (parserPos d) [Expected "("]) e1)
    pappyAlt1_3 e1 = NoParse e1

parserParsePTys :: ParserDerivs -> Result ParserDerivs ([Ty])
parserParsePTys d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case parserPTy d of
        Parsed p d3 e3 ->
          case parserSym d3 of
            Parsed "," d5 e5 ->
              case parserPTys d5 of
                Parsed ps d7 e7 ->
                  Parsed ( p:ps ) d7 (maximum [e7,e5,e3,e1])
                NoParse e7 -> pappyAlt1_2 (maximum [e7,e5,e3,e1])
            _ -> pappyAlt1_2 (maximum [(ParseError (parserPos d3) [Expected ","]),e3,e1])
        NoParse e3 -> pappyAlt1_2 (max e3 e1)
    pappyAlt1_2 e1 =
      case parserPTy d of
        Parsed p d3 e3 ->
          Parsed ( [p]  ) d3 (max e3 e1)
        NoParse e3 -> pappyAlt1_3 (max e3 e1)
    pappyAlt1_3 e1 = NoParse e1

parserPTy :: ParserDerivs -> Result ParserDerivs (Ty)
parserPTy d =
  case parserTy d of
    Parsed ty d1 e1 ->
      case parserID d1 of
        Parsed id d3 e3 ->
          Parsed ( TyVAR id ty ) d3 (max e3 e1)
        NoParse e3 -> NoParse (max e3 e1)
    NoParse e1 -> NoParse e1

parserParseTys :: ParserDerivs -> Result ParserDerivs ([Ty])
parserParseTys d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case parserTy d of
        Parsed t d3 e3 ->
          case parserSym d3 of
            Parsed "," d5 e5 ->
              case parserTys d5 of
                Parsed ts d7 e7 ->
                  Parsed ( t:ts ) d7 (maximum [e7,e5,e3,e1])
                NoParse e7 -> pappyAlt1_2 (maximum [e7,e5,e3,e1])
            _ -> pappyAlt1_2 (maximum [(ParseError (parserPos d3) [Expected ","]),e3,e1])
        NoParse e3 -> pappyAlt1_2 (max e3 e1)
    pappyAlt1_2 e1 =
      case parserTy d of
        Parsed t d3 e3 ->
          Parsed ( [t]  ) d3 (max e3 e1)
        NoParse e3 -> pappyAlt1_3 (max e3 e1)
    pappyAlt1_3 e1 = NoParse e1

parserParseTyTail :: ParserDerivs -> Result ParserDerivs (( Ty  ->  Ty ))
parserParseTyTail d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case parserSym d of
        Parsed "->" d3 e3 ->
          case parserTy d3 of
            Parsed b d5 e5 ->
              case parserTyTail d5 of
                Parsed pappyTail d7 e7 ->
                  Parsed (\a -> pappyTail ( TyABS a b )) d7 (maximum [e7,e5,e3,e1])
                NoParse e7 -> pappyAlt1_2 (maximum [e7,e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        _ -> pappyAlt1_2 (max (ParseError (parserPos d) [Expected "->"]) e1)
    pappyAlt1_2 e1 =
      Parsed (\v -> v) d e1
    pappyAlt1_3 e1 = NoParse e1

parserTy :: ParserDerivs -> Result ParserDerivs ( Ty )
parserTy d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case pappyResult3 of
        Parsed l d3 e3 ->
          case parserTyTail d3 of
            Parsed t d5 e5 ->
              Parsed (t l) d5 (maximum [e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        NoParse e3 -> pappyAlt1_2 (max e3 e1)
      where
        pappyResult3 =
          case pappyResult5 of
            Parsed t d5 e5 ->
              case parserStarRule0 d5 of
                Parsed _ d7 e7 ->
                  Parsed ( t         ) d7 (max e7 e5)
                NoParse e7 -> NoParse (max e7 e5)
            NoParse e5 -> NoParse e5
          where
            pappyResult5 =
              case parserWord d of
                Parsed "Bool" d7 e7 ->
                  Parsed ( TyBOOL     ) d7 e7
                _ -> NoParse (ParseError (parserPos d) [Expected "Bool"])
    pappyAlt1_2 e1 =
      case pappyResult3 of
        Parsed l d3 e3 ->
          case parserTyTail d3 of
            Parsed t d5 e5 ->
              Parsed (t l) d5 (maximum [e5,e3,e1])
            NoParse e5 -> pappyAlt1_3 (maximum [e5,e3,e1])
        NoParse e3 -> pappyAlt1_3 (max e3 e1)
      where
        pappyResult3 =
          case parserChar d of
            Parsed '(' d5 _ ->
              case parserTys d5 of
                Parsed ts d7 e7 ->
                  case parserChar d7 of
                    Parsed ')' d9 _ ->
                      Parsed ( TyPROD ts ) d9 e7
                    _ -> NoParse e7
                NoParse e7 -> NoParse e7
            _ -> NoParse (ParseError (parserPos d) [])
    pappyAlt1_3 e1 = NoParse e1

parserParseMthds :: ParserDerivs -> Result ParserDerivs ([Mthd])
parserParseMthds d =
  case pappyResult1 of
    Parsed m d1 e1 ->
      case parserMthds d1 of
        Parsed ms d3 e3 ->
          Parsed ( m:ms           ) d3 (max e3 e1)
        NoParse e3 -> NoParse (max e3 e1)
    NoParse e1 -> NoParse e1
  where
    pappyResult1 =
      case parserWord d of
        Parsed "method" d3 e3 ->
          case parserID d3 of
            Parsed id d5 e5 ->
              case parserTy d5 of
                Parsed ty d7 e7 ->
                  case parserSym d7 of
                    Parsed "{" d9 e9 ->
                      case pappyResult11 of
                        Parsed k d11 e11 ->
                          case parserSym d11 of
                            Parsed "}" d13 e13 ->
                              Parsed ( MT id ty k     ) d13 (maximum [e13,e11,e9,e7,e5,e3])
                            _ -> NoParse (maximum [(ParseError (parserPos d11) [Expected "}"]),e11,e9,e7,e5,e3])
                        NoParse e11 -> NoParse (maximum [e11,e9,e7,e5,e3])
                      where
                        pappyResult11 =
                          case parserAppKTm d9 of
                            Parsed k d13 e13 ->
                              Parsed ( k              ) d13 e13
                            NoParse e13 -> NoParse e13
                    _ -> NoParse (maximum [(ParseError (parserPos d7) [Expected "{"]),e7,e5,e3])
                NoParse e7 -> NoParse (maximum [e7,e5,e3])
            NoParse e5 -> NoParse (max e5 e3)
        _ -> NoParse (ParseError (parserPos d) [Expected "method"])

parserParseAppKTmTail :: ParserDerivs -> Result ParserDerivs (( K Tm  ->  K Tm ))
parserParseAppKTmTail d =
  pappyAlt1_1 (ParseError (parserPos d) []) where
    pappyAlt1_1 e1 =
      case pappyResult3 of
        Parsed k2 d3 e3 ->
          case parserAppKTmTail d3 of
            Parsed pappyTail d5 e5 ->
              Parsed (\k1 -> pappyTail ( bindK(s1++s2)(TmApp(K t1)(K t2))
                                                                where 
                                                                    (t1,s1) = splitK k1 
                                                                    (t2,s2) = splitK k2 )) d5 (maximum [e5,e3,e1])
            NoParse e5 -> pappyAlt1_2 (maximum [e5,e3,e1])
        NoParse e3 -> pappyAlt1_2 (max e3 e1)
      where
        pappyResult3 =
          case parserAKTm d of
            Parsed k d5 e5 ->
              Parsed ( k              ) d5 e5
            NoParse e5 -> NoParse e5
    pappyAlt1_2 e1 =
      Parsed (\v -> v) d e1
    pappyAlt1_3 e1 = NoParse e1

parserAppKTm :: ParserDerivs -> Result ParserDerivs ( K Tm )
parserAppKTm d =
  case pappyResult1 of
    Parsed l d1 e1 ->
      case parserAppKTmTail d1 of
        Parsed t d3 e3 ->
          Parsed (t l) d3 (max e3 e1)
        NoParse e3 -> NoParse (max e3 e1)
    NoParse e1 -> NoParse e1
  where
    pappyResult1 =
      case pappyResult3 of
        Parsed k d3 e3 ->
          Parsed ( k              ) d3 e3
        NoParse e3 -> NoParse e3
      where
        pappyResult3 =
          case parserAKTm d of
            Parsed k d5 e5 ->
              Parsed ( k              ) d5 e5
            NoParse e5 -> NoParse e5

parserParseAKTm :: ParserDerivs -> Result ParserDerivs ( K Tm )
parserParseAKTm d =
  case parserSym d of
    Parsed "(" d1 e1 ->
      case pappyResult3 of
        Parsed k d3 e3 ->
          case parserChar d3 of
            Parsed ')' d5 _ ->
              Parsed ( k              ) d5 (max e3 e1)
            _ -> NoParse (max e3 e1)
        NoParse e3 -> NoParse (max e3 e1)
      where
        pappyResult3 =
          case parserAppKTm d1 of
            Parsed k d5 e5 ->
              Parsed ( k              ) d5 e5
            NoParse e5 -> NoParse e5
    _ -> NoParse (ParseError (parserPos d) [Expected "("])

