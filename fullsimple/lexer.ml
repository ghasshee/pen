# 1 "lexer.mll"
 
open Support

let reservedWords = [
  (* Keywords *)
    ("Top",     fun i -> Parser.TOP i);
    ("ref",     fun i -> Parser.REF i);
    ("Ref",     fun i -> Parser.REFTYPE i);
    (*
    ("List",    fun i -> Parser.LIST i);
    ("tail",    fun i -> Parser.TAIL i);
    ("head",    fun i -> Parser.HEAD i);
    ("isnil",   fun i -> Parser.ISNIL i);
    ("cons",    fun i -> Parser.CONS i);
    ("nil",     fun i -> Parser.NIL i);
    *)
    ("letrec",  fun i -> Parser.LETREC i);
    ("fix",     fun i -> Parser.FIX i);
    ("Float",   fun i -> Parser.FLOAT i);
    ("*.",      fun i -> Parser.TIMESFLOAT i);
    ("String",  fun i -> Parser.STRING i);
    ("case",    fun i -> Parser.CASE i);
    ("of",      fun i -> Parser.OF i);
    ("as",      fun i -> Parser.AS i);
    ("unit",    fun i -> Parser.UNIT i);
    ("Unit",    fun i -> Parser.UNITTYPE i);
    ("where",   fun i -> Parser.WHERE i);
    ("in",      fun i -> Parser.IN i);
    ("let",     fun i -> Parser.LET i);
    ("Bool",    fun i -> Parser.BOOL i);
    ("Nat",     fun i -> Parser.NAT i);
    ("\\",      fun i -> Parser.LAMBDA i);
    ("if",      fun i -> Parser.IF i);
    ("then",    fun i -> Parser.THEN i);
    ("else",    fun i -> Parser.ELSE i);
    ("true",    fun i -> Parser.TRUE i);
    ("false",   fun i -> Parser.FALSE i);
    ("succ",    fun i -> Parser.SUCC i);
    ("pred",    fun i -> Parser.PRED i);
    ("iszero",  fun i -> Parser.ISZERO i);
  
  (* Symbols *)
    ("_",       fun i -> Parser.USCORE i);
    ("'",       fun i -> Parser.APOSTROPHE i);
    ("\"",      fun i -> Parser.DQUOTE i);
    ("!",       fun i -> Parser.BANG i);
    ("#",       fun i -> Parser.HASH i);
    ("$",       fun i -> Parser.TRIANGLE i);
    ("*",       fun i -> Parser.STAR i);
    ("|",       fun i -> Parser.VBAR i);
    (".",       fun i -> Parser.DOT i);
    (";",       fun i -> Parser.SEMI i);
    (",",       fun i -> Parser.COMMA i);
    ("/",       fun i -> Parser.SLASH i);
    (":",       fun i -> Parser.COLON i);
    ("::",      fun i -> Parser.COLONCOLON i);
    ("=",       fun i -> Parser.EQ i);
    ("==",      fun i -> Parser.EQEQ i);
    ("[",       fun i -> Parser.LSQUARE i); 
    ("<",       fun i -> Parser.LT i);
    ("{",       fun i -> Parser.LCURLY i); 
    ("(",       fun i -> Parser.LPAREN i); 
    ("<-",      fun i -> Parser.LEFTARROW i); 
    ("{|",      fun i -> Parser.LCURLYBAR i); 
    ("[|",      fun i -> Parser.LSQUAREBAR i); 
    ("}",       fun i -> Parser.RCURLY i);
    (")",       fun i -> Parser.RPAREN i);
    ("]",       fun i -> Parser.RSQUARE i);
    (">",       fun i -> Parser.GT i);
    ("|}",      fun i -> Parser.BARRCURLY i);
    ("|>",      fun i -> Parser.BARGT i);
    ("|]",      fun i -> Parser.BARRSQUARE i);
    ("\n",      fun i -> Parser.NEWLINE i); 
    (";;",      fun i -> Parser.DOUBLESEMI i); 

  (* Special compound symbols: *)
    (":=",      fun i -> Parser.COLONEQ i);
    ("->",      fun i -> Parser.ARROW i);
    ("=>",      fun i -> Parser.DARROW i);
    ("==>",     fun i -> Parser.DDARROW i);
]

(* Support functions *)

type buildfun               =   info -> Parser.token
type hoge                   =   (string,buildfun) Hashtbl.t
let  symbolTable:hoge       =   Hashtbl.create 1024
let _                       =   List.iter (fun(str,f)->Hashtbl.add symbolTable str f) reservedWords
let fos                     =   float_of_string
let ios                     =   int_of_string 
let initCapital str         =   let s=String.get str 0 in s>='A'&&s<='Z'  

let createID i str          =   (* info -> string -> token *)
  try   Hashtbl.find symbolTable str i
  with _ -> if initCapital str then Parser.UCID {i=i;v=str} else Parser.LCID {i=i;v=str}

let lineno                  =   ref 1
and depth                   =   ref 0
and start                   =   ref 0
and filename                =   ref ""
and startLex                =   ref dummyinfo
let create inFile stream    =   if not(Filename.is_implicit inFile) 
                                    then filename   := inFile
                                    else filename   := Filename.concat (Sys.getcwd()) inFile;
                                lineno := 1; start := 0; Lexing.from_channel stream
let newline lexbuf          =   incr lineno; start := (Lexing.lexeme_start lexbuf)
let info    lexbuf          =   createInfo (!filename) (!lineno) (Lexing.lexeme_start lexbuf - !start)
let text                    =   Lexing.lexeme
let stringBuffer            =   ref (String.create 2048)
let stringEnd               =   ref 0
let resetStr ()             =   stringEnd := 0
let addStr ch               =
    let x                       =   !stringEnd in
    let buffer                  =   !stringBuffer in
    if x=String.length buffer 
    then begin
        let newBuffer   = String.create (x*2) in
        String.blit buffer 0 newBuffer 0 x;
        String.set newBuffer x ch;
        stringBuffer    := newBuffer;
        stringEnd       := x+1
    end else begin
        String.set buffer x ch;
        stringEnd       := x+1
    end
let getStr ()                   = String.sub (!stringBuffer) 0 (!stringEnd)
let extractLineno yytxt offset  = ios(String.sub yytxt offset(String.length yytxt-offset))
let out_of_char x fi            = if x>255 then error fi"Illegal Char" else Char.chr x 

# 132 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\237\255\240\255\242\255\243\255\022\000\068\000\092\000\
    \102\000\007\000\071\000\116\000\091\000\186\000\218\000\095\000\
    \039\001\250\255\001\000\041\000\102\000\157\000\036\000\035\000\
    \044\000\044\000\037\000\255\255\060\000\058\000\254\255\004\000\
    \252\255\245\255\251\255\049\001\059\001\239\255\248\255\100\000\
    \167\000\241\255\005\000\238\255\086\000\254\255\052\000\058\000\
    \055\000\071\000\053\000\059\000\255\255\171\000\251\255\252\255\
    \253\255\254\255\255\255\172\000\251\255\252\255\253\255\136\000\
    \144\000\255\255\254\255\187\000\251\255\252\255\253\255\254\255\
    \255\255\083\001\249\255\093\001\251\255\252\255\253\255\254\255\
    \255\255\103\001\250\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\012\000\012\000\011\000\
    \011\000\012\000\012\000\011\000\012\000\011\000\009\000\012\000\
    \006\000\255\255\018\000\012\000\012\000\002\000\012\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\008\000\255\255\255\255\010\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\001\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\006\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\255\255\000\000\045\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\054\000\000\000\000\000\
    \000\000\000\000\000\000\061\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
    \000\000\074\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\017\000\017\000\021\000\018\000\017\000\041\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\004\000\003\000\022\000\007\000\007\000\007\000\004\000\
    \020\000\004\000\015\000\007\000\004\000\011\000\004\000\005\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\013\000\006\000\012\000\010\000\004\000\004\000\
    \043\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\019\000\007\000\004\000\004\000\014\000\
    \007\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\009\000\008\000\004\000\007\000\040\000\
    \007\000\007\000\007\000\033\000\039\000\033\000\034\000\007\000\
    \033\000\007\000\007\000\007\000\007\000\038\000\037\000\032\000\
    \023\000\007\000\028\000\007\000\025\000\033\000\007\000\024\000\
    \007\000\007\000\007\000\026\000\027\000\029\000\030\000\007\000\
    \007\000\007\000\033\000\047\000\033\000\033\000\021\000\017\000\
    \048\000\021\000\031\000\049\000\050\000\051\000\007\000\052\000\
    \040\000\041\000\033\000\040\000\042\000\055\000\060\000\066\000\
    \007\000\046\000\065\000\000\000\007\000\021\000\000\000\000\000\
    \000\000\000\000\007\000\033\000\000\000\069\000\007\000\040\000\
    \000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
    \007\000\000\000\000\000\000\000\007\000\000\000\063\000\033\000\
    \007\000\000\000\007\000\064\000\000\000\072\000\007\000\007\000\
    \007\000\000\000\007\000\033\000\007\000\007\000\000\000\007\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\000\000\007\000\000\000\007\000\000\000\000\000\033\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\014\000\000\000\000\000\000\000\000\000\000\000\056\000\
    \000\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\000\000\000\000\007\000\070\000\
    \000\000\000\000\007\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\000\000\007\000\000\000\
    \007\000\014\000\000\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\035\000\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\077\000\000\000\000\000\
    \000\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\057\000\062\000\000\000\000\000\078\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\071\000\000\000\000\000\000\000\000\000\
    \000\000\080\000\000\000\000\000\000\000\000\000\000\000\079\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\018\000\000\000\000\000\031\000\042\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\007\000\007\000\009\000\010\000\010\000\019\000\007\000\
    \012\000\007\000\008\000\008\000\008\000\015\000\015\000\020\000\
    \022\000\008\000\023\000\008\000\024\000\012\000\007\000\022\000\
    \011\000\011\000\011\000\025\000\026\000\028\000\029\000\011\000\
    \008\000\011\000\039\000\046\000\008\000\019\000\021\000\021\000\
    \047\000\021\000\021\000\048\000\049\000\050\000\011\000\051\000\
    \040\000\040\000\011\000\040\000\040\000\053\000\059\000\063\000\
    \007\000\044\000\064\000\255\255\007\000\021\000\255\255\255\255\
    \255\255\255\255\008\000\008\000\255\255\067\000\008\000\040\000\
    \255\255\255\255\255\255\255\255\255\255\053\000\255\255\255\255\
    \011\000\255\255\255\255\255\255\011\000\255\255\059\000\012\000\
    \007\000\255\255\007\000\059\000\255\255\067\000\013\000\013\000\
    \013\000\255\255\008\000\008\000\008\000\013\000\255\255\013\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \011\000\255\255\011\000\255\255\013\000\255\255\255\255\013\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\014\000\255\255\255\255\255\255\255\255\255\255\053\000\
    \255\255\255\255\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\255\255\255\255\013\000\067\000\
    \255\255\255\255\013\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\255\255\013\000\255\255\
    \013\000\014\000\255\255\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\016\000\044\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\073\000\255\255\255\255\
    \255\255\255\255\073\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\053\000\059\000\255\255\255\255\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\067\000\255\255\255\255\255\255\255\255\
    \255\255\073\000\255\255\255\255\255\255\255\255\255\255\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\073\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 145 "lexer.mll"
                            ( show lexbuf                                           )
# 349 "lexer.ml"

  | 1 ->
# 146 "lexer.mll"
                            ( load lexbuf                                           )
# 354 "lexer.ml"

  | 2 ->
# 147 "lexer.mll"
                            ( token lexbuf                                          )
# 359 "lexer.ml"

  | 3 ->
# 148 "lexer.mll"
                            ( Parser.UNIT(info lexbuf)                              )
# 364 "lexer.ml"

  | 4 ->
# 149 "lexer.mll"
                            ( Parser.NIL(info lexbuf)                               )
# 369 "lexer.ml"

  | 5 ->
# 150 "lexer.mll"
                            ( newline lexbuf; token lexbuf                          )
# 374 "lexer.ml"

  | 6 ->
# 151 "lexer.mll"
                            ( Parser.INTV{i=info lexbuf;v=ios(text lexbuf)}         )
# 379 "lexer.ml"

  | 7 ->
# 152 "lexer.mll"
                            ( Parser.TIMESFLOAT(info lexbuf)                        )
# 384 "lexer.ml"

  | 8 ->
# 153 "lexer.mll"
                            ( Parser.FLOATV{i=info lexbuf;v=fos(text lexbuf)}       )
# 389 "lexer.ml"

  | 9 ->
# 154 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 394 "lexer.ml"

  | 10 ->
# 156 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 399 "lexer.ml"

  | 11 ->
# 157 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 404 "lexer.ml"

  | 12 ->
# 158 "lexer.mll"
                            ( createID (info lexbuf) (text lexbuf)                  )
# 409 "lexer.ml"

  | 13 ->
# 159 "lexer.mll"
                            ( resetStr(); startLex:=info lexbuf; string lexbuf      )
# 414 "lexer.ml"

  | 14 ->
# 160 "lexer.mll"
                            ( Parser.DOUBLESEMI(info lexbuf)                        )
# 419 "lexer.ml"

  | 15 ->
# 161 "lexer.mll"
                            ( Parser.EOF(info lexbuf)                               )
# 424 "lexer.ml"

  | 16 ->
# 162 "lexer.mll"
                            ( error (info lexbuf) "Unmatched end of comment"        )
# 429 "lexer.ml"

  | 17 ->
# 163 "lexer.mll"
                            ( depth:=1;startLex:=info lexbuf;comment lexbuf;token lexbuf )
# 434 "lexer.ml"

  | 18 ->
# 164 "lexer.mll"
                            ( error (info lexbuf) "Illegal character"               )
# 439 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and show lexbuf =
    __ocaml_lex_show_rec lexbuf 44
and __ocaml_lex_show_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 167 "lexer.mll"
                            ( Parser.SHOWCONTEXT(info lexbuf)                       )
# 451 "lexer.ml"

  | 1 ->
# 168 "lexer.mll"
                            ( show lexbuf   )
# 456 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_show_rec lexbuf __ocaml_lex_state

and load lexbuf =
    __ocaml_lex_load_rec lexbuf 53
and __ocaml_lex_load_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 170 "lexer.mll"
                            ( Parser.LOAD{i = !startLex; v=getStr()}                  )
# 468 "lexer.ml"

  | 1 ->
# 171 "lexer.mll"
                            ( error(!startLex)"String not terminated"               )
# 473 "lexer.ml"

  | 2 ->
# 172 "lexer.mll"
                            ( addStr(escaped lexbuf)              ; load lexbuf     )
# 478 "lexer.ml"

  | 3 ->
# 173 "lexer.mll"
                            ( addStr('\n') ; newline lexbuf       ; load lexbuf     )
# 483 "lexer.ml"

  | 4 ->
# 174 "lexer.mll"
                            ( addStr(Lexing.lexeme_char lexbuf 0) ; load lexbuf     )
# 488 "lexer.ml"

  | 5 ->
# 175 "lexer.mll"
                            ( resetStr();startLex:=info lexbuf    ; load lexbuf     )
# 493 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_load_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 59
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 178 "lexer.mll"
                            ( depth:=succ !depth; comment lexbuf                    )
# 505 "lexer.ml"

  | 1 ->
# 179 "lexer.mll"
                            ( depth:=pred !depth; if !depth>0 then comment lexbuf   )
# 510 "lexer.ml"

  | 2 ->
# 180 "lexer.mll"
                            ( error (!startLex) "Comment not terminated"            )
# 515 "lexer.ml"

  | 3 ->
# 181 "lexer.mll"
                            ( comment lexbuf                                        )
# 520 "lexer.ml"

  | 4 ->
# 182 "lexer.mll"
                            ( newline lexbuf; comment lexbuf                        )
# 525 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 67
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 185 "lexer.mll"
                            ( Parser.STRINGV{i= !startLex; v=getStr()}              )
# 537 "lexer.ml"

  | 1 ->
# 186 "lexer.mll"
                            ( error(!startLex)"String not terminated"               )
# 542 "lexer.ml"

  | 2 ->
# 187 "lexer.mll"
                            ( addStr(escaped lexbuf)              ; string lexbuf   )
# 547 "lexer.ml"

  | 3 ->
# 188 "lexer.mll"
                            ( addStr('\n') ; newline lexbuf       ; string lexbuf   )
# 552 "lexer.ml"

  | 4 ->
# 189 "lexer.mll"
                            ( addStr(Lexing.lexeme_char lexbuf 0) ; string lexbuf   )
# 557 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and escaped lexbuf =
    __ocaml_lex_escaped_rec lexbuf 73
and __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 191 "lexer.mll"
                          ( '\n'                                                  )
# 569 "lexer.ml"

  | 1 ->
# 192 "lexer.mll"
                          ( '\t'                                                  )
# 574 "lexer.ml"

  | 2 ->
# 193 "lexer.mll"
                           ( '\\'                                                  )
# 579 "lexer.ml"

  | 3 ->
# 194 "lexer.mll"
                            ( '\034'                                                )
# 584 "lexer.ml"

  | 4 ->
# 195 "lexer.mll"
                           ( '\''                                                  )
# 589 "lexer.ml"

  | 5 ->
# 196 "lexer.mll"
                            ( out_of_char (ios(text lexbuf))(info lexbuf)           )
# 594 "lexer.ml"

  | 6 ->
# 197 "lexer.mll"
                            ( error (info lexbuf) "Illegal character constant"      )
# 599 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_escaped_rec lexbuf __ocaml_lex_state

;;

