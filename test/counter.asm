# Stack: []
0x4	MSTORE(0x40, 0x60)
0x5	PUSH(0x20)
0x26	DUP1
0x27	PUSH(0x40)
0x29	DUP1
0x2A	PUSH(MLOAD(POP(0x40)))
0x2B	DUP1
0x2C	SWAP3
0x2D	PUSH(POP(0x20) + POP(@0x2A))
0x2E	SWAP1
0x2F	MSTORE(POP(0x40), POP(@0x2D))
0x30	DUP2
0x31	DUP1
0x34	DUP2
0x35	CODECOPY(POP(@0x2A), CODESIZE() - POP(0x20), POP(0x20))
0x5C	JUMPI(0x2, !(CODESIZE() == 0x555))

# Stack: [@0x2A 0x20]
0x5D	PUSH(0x2)

:label0
# Stack: [[0x2 | @0xD1] [@0xF4 | @0x2A] [0x20 | @0xAE]]
0x7F	DUP3
0x86	JUMPI(:label1, !POP())

# Stack: [[0x2 | @0xD1] [@0x2A | @0xF4] [@0xAE | 0x20]]
0x87	DUP2
0x89	DUP1
0x8A	SSTORE(POP(), MLOAD(POP()))
0x8B	PUSH(0x20)
0xAC	SWAP1
0xAD	SWAP3
0xAE	PUSH(POP() - POP(0x20))
0xAF	SWAP2
0xD1	PUSH(0x1 + POP())
0xD2	SWAP1
0xF4	PUSH(0x20 + POP())
0xF5	SWAP1
0xFB	JUMP(:label0)

:label1
# Stack: [[@0xD1 | 0x2] [@0xF4 | @0x2A] [@0xAE | 0x20]]
0xFD	POP()
0xFE	POP()
0xFF	POP()
0x108	JUMPI(:label2, SLOAD(0x1))

# Stack: []
0x109	PUSH(0x1)
0x10B	DUP1
0x10C	SSTORE(POP(0x1), POP(0x1))

:label2
# Stack: []
0x150	SSTORE(0x0, 0x23)
0x151	PUSH(0x394)
0x172	DUP1
0x173	PUSH(0x40)
0x175	DUP1
0x176	PUSH(MLOAD(POP(0x40)))
0x177	DUP1
0x178	SWAP3
0x179	PUSH(POP(0x394) + POP(@0x176))
0x17A	SWAP1
0x17B	MSTORE(POP(0x40), POP(@0x179))
0x17C	DUP2
0x19E	DUP2
0x19F	CODECOPY(POP(@0x176), 0x1A1, POP(0x394))
0x1A0	RETURN(POP(@0x176), POP(0x394))

# Stack: []
0x415	PUSH(:label1)

# Stack: []
0x48A	PUSH(:label0)

# Stack: []
0x497	PUSH(:label2)

